#line 2
// clang-format off
DEFINE_UI_PARAMS(minor_line_width, Minor Line Width, DCTLUI_SLIDER_FLOAT, 0.012, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(line_thickness, Line Thickness, DCTLUI_SLIDER_FLOAT, 0.003, 0.0, 0.01, 0.01)
DEFINE_UI_PARAMS(text_scale, Text Size, DCTLUI_SLIDER_FLOAT, 0.025, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(text_width, Margin for Text, DCTLUI_SLIDER_FLOAT, 0.04, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(num_repetitions, Graticule Brightness, DCTLUI_SLIDER_INT, 5, 1, 10, 1)
DEFINE_UI_PARAMS(num_stops, Num Stops, DCTLUI_SLIDER_INT, 3, 1, 10, 1)
DEFINE_UI_PARAMS(bt1886_lw, BT1886 White Point, DCTLUI_VALUE_BOX, 100)
DEFINE_UI_PARAMS(bt1886_lb, BT1886 Black Point, DCTLUI_VALUE_BOX, 0)
DEFINE_UI_PARAMS(bt1886_g, BT1886 Gamma, DCTLUI_VALUE_BOX, 2.4)

DEFINE_UI_PARAMS(mid_gray, Mid Gray Nits, DCTLUI_VALUE_BOX, 10)

DEFINE_UI_PARAMS(rescale_image, Rescale Mode, DCTLUI_COMBO_BOX, 2, {NONE, FILL, ASPECT}, {None, Fill, Aspect})
DEFINE_UI_PARAMS(waveform_scale, Waveform Scale, DCTLUI_COMBO_BOX, 0, {BT1886_NITS, BT1886_STOPS, ST2084_NITS, ST2084_STOPS}, {BT.1886 Annex 1 Nits, BT.1886 Annex 1 Stops, ST.2084 Nits, ST.2084 Stops})

// clang-format on

__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

////////////////////////////////
//    FONT SPECIFICATION      //
////////////////////////////////

// Precomputed via the script at https://github.com/thatcherfreeman/dctl-text-rendering

#define FONT_WIDTH 12
#define FONT_HEIGHT 16
#define FONT_LENGTH 127

__CONSTANT__ int font_widths[FONT_LENGTH] = {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                                             12, 12, 12, 12, 12, 12, 12, 4,  7,  9,  8,  10, 9,  4,  5,  5,  8,  8,  4,  7,  4,  8,  8,  5,  8,  8,
                                             9,  8,  8,  8,  8,  8,  4,  4,  8,  8,  8,  8,  12, 8,  8,  8,  8,  8,  8,  8,  8,  4,  8,  8,  8,  10,
                                             8,  8,  8,  8,  8,  8,  8,  8,  8,  10, 8,  8,  8,  5,  8,  5,  8,  8,  5,  8,  8,  8,  8,  8,  6,  8,
                                             8,  4,  4,  8,  4,  10, 8,  8,  8,  8,  8,  8,  6,  8,  8,  10, 8,  8,  8,  6,  4,  6,  9};
__CONSTANT__ int font[FONT_LENGTH][FONT_HEIGHT] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 24, 24, 24, 24, 24, 24, 24, 0, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 216, 216, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 432, 432, 1016, 1016, 432, 432, 1016, 1016, 432, 432, 0, 0, 0, 0},
                                                   {0, 0, 96, 496, 504, 24, 248, 496, 384, 504, 248, 96, 0, 0, 0, 0},
                                                   {0, 0, 1584, 1656, 1656, 1584, 992, 496, 792, 1944, 1944, 792, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 24, 880, 1016, 408, 408, 1016, 880, 0, 0, 0, 0},
                                                   {0, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 48, 56, 24, 24, 24, 24, 24, 24, 56, 48, 0, 0, 0, 0},
                                                   {0, 0, 24, 56, 48, 48, 48, 48, 48, 48, 56, 24, 0, 0, 0, 0},
                                                   {0, 0, 96, 96, 504, 504, 240, 408, 408, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 96, 96, 504, 504, 96, 96, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 248, 248, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 384, 384, 384, 384, 496, 248, 24, 24, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 408, 408, 408, 408, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 56, 56, 48, 48, 48, 48, 48, 48, 48, 48, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 384, 496, 248, 24, 24, 504, 504, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 384, 224, 480, 384, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 480, 496, 440, 408, 408, 1016, 1016, 384, 384, 384, 0, 0, 0, 0},
                                                   {0, 0, 504, 504, 24, 24, 248, 504, 384, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 24, 248, 504, 408, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 504, 504, 408, 192, 96, 96, 240, 240, 96, 96, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 408, 240, 504, 408, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 408, 504, 496, 384, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 24, 0, 0, 0},
                                                   {0, 0, 0, 0, 384, 480, 120, 24, 120, 480, 384, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 504, 504, 0, 504, 504, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 24, 120, 480, 384, 480, 120, 24, 0, 0, 0, 0, 0},
                                                   {0, 0, 240, 504, 408, 384, 480, 224, 96, 0, 96, 96, 0, 0, 0, 0},
                                                   {0, 0, 2016, 4080, 7224, 6552, 7128, 8152, 3992, 4152, 8176, 4064, 0, 0, 0, 0},
                                                   {0, 0, 0, 240, 504, 408, 408, 504, 504, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 248, 504, 408, 248, 504, 408, 408, 504, 248, 0, 0, 0, 0},
                                                   {0, 0, 0, 240, 504, 408, 24, 24, 24, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 0, 248, 504, 408, 408, 408, 408, 408, 504, 248, 0, 0, 0, 0},
                                                   {0, 0, 0, 504, 504, 24, 120, 120, 24, 24, 504, 504, 0, 0, 0, 0},
                                                   {0, 0, 0, 504, 504, 24, 24, 120, 120, 24, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 0, 240, 504, 408, 24, 472, 472, 408, 504, 496, 0, 0, 0, 0},
                                                   {0, 0, 0, 408, 408, 408, 504, 504, 408, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 0, 384, 384, 384, 384, 384, 384, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 0, 408, 408, 408, 248, 248, 408, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 504, 504, 0, 0, 0, 0},
                                                   {0, 0, 0, 1008, 2040, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 0, 0, 0, 0},
                                                   {0, 0, 0, 240, 504, 408, 408, 408, 408, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 240, 504, 408, 408, 408, 408, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 0, 248, 504, 408, 408, 504, 248, 24, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 0, 240, 504, 408, 408, 408, 408, 216, 504, 432, 0, 0, 0, 0},
                                                   {0, 0, 0, 248, 504, 408, 408, 248, 504, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 240, 504, 408, 56, 240, 448, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 0, 504, 504, 96, 96, 96, 96, 96, 96, 96, 0, 0, 0, 0},
                                                   {0, 0, 0, 408, 408, 408, 408, 408, 408, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 0, 408, 408, 408, 408, 408, 240, 240, 96, 96, 0, 0, 0, 0},
                                                   {0, 0, 0, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 2040, 1008, 0, 0, 0, 0},
                                                   {0, 0, 0, 408, 408, 408, 240, 504, 408, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 408, 408, 408, 408, 504, 496, 384, 504, 248, 0, 0, 0, 0},
                                                   {0, 0, 0, 504, 504, 384, 496, 248, 24, 24, 504, 504, 0, 0, 0, 0},
                                                   {0, 0, 56, 56, 24, 24, 24, 24, 24, 24, 56, 56, 0, 0, 0, 0},
                                                   {0, 0, 24, 24, 24, 24, 248, 496, 384, 384, 384, 384, 0, 0, 0, 0},
                                                   {0, 0, 56, 56, 48, 48, 48, 48, 48, 48, 56, 56, 0, 0, 0, 0},
                                                   {0, 0, 96, 96, 240, 240, 408, 408, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 508, 508, 0},
                                                   {0, 0, 24, 56, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 248, 504, 384, 496, 504, 408, 504, 496, 0, 0, 0, 0},
                                                   {0, 0, 24, 24, 248, 504, 408, 408, 408, 408, 504, 248, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 240, 504, 408, 24, 24, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 384, 384, 496, 504, 408, 408, 408, 408, 504, 496, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 240, 504, 408, 504, 504, 24, 504, 496, 0, 0, 0, 0},
                                                   {0, 0, 96, 112, 48, 120, 120, 48, 48, 48, 48, 48, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 496, 504, 408, 408, 408, 408, 504, 496, 384, 504, 248, 0},
                                                   {0, 0, 24, 24, 248, 504, 408, 408, 408, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 24, 24, 0, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 24, 24, 0, 24, 24, 24, 24, 24, 24, 24, 24, 30, 14, 0},
                                                   {0, 0, 24, 24, 408, 408, 408, 248, 504, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 888, 2040, 1752, 1752, 1752, 1752, 1752, 1752, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 248, 504, 408, 408, 408, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 240, 504, 408, 408, 408, 408, 504, 240, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 248, 504, 408, 408, 408, 408, 504, 248, 24, 24, 24, 0},
                                                   {0, 0, 0, 0, 496, 504, 408, 408, 408, 408, 504, 496, 384, 384, 384, 0},
                                                   {0, 0, 0, 0, 248, 504, 408, 24, 24, 24, 24, 24, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 496, 504, 24, 248, 496, 384, 504, 248, 0, 0, 0, 0},
                                                   {0, 0, 48, 48, 120, 120, 48, 48, 48, 48, 112, 96, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 408, 408, 408, 408, 408, 408, 504, 496, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 408, 408, 408, 408, 240, 240, 96, 96, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 1752, 1752, 1752, 1752, 1752, 1752, 2040, 1008, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 408, 408, 408, 240, 504, 408, 408, 408, 0, 0, 0, 0},
                                                   {0, 0, 0, 0, 408, 408, 408, 408, 408, 408, 504, 496, 384, 504, 248, 0},
                                                   {0, 0, 0, 0, 504, 504, 384, 496, 248, 24, 504, 504, 0, 0, 0, 0},
                                                   {0, 0, 96, 112, 48, 48, 24, 56, 48, 48, 112, 96, 0, 0, 0, 0},
                                                   {0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0},
                                                   {0, 0, 24, 56, 48, 48, 96, 112, 48, 48, 56, 24, 0, 0, 0, 0},
                                                   {0, 0, 880, 1016, 472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

////////////////////////////
// DRAW TEXT              //
////////////////////////////

typedef struct {
        float x, y;       // some specified position on the screen, refers to the top left corner of a string or character.
        float scale;      // proportion of the height of the frame.
        float waveform_y; // Y-coordinate of where this char should be on the waveform.
} char_trans_t;

typedef struct {
        float x, y; // Current position on the screen, 0, 0 is top left corner, 1,1 is bottom right.
} curr_pos_t;

__DEVICE__ void draw_char(char c, __PRIVATE__ char_trans_t* char_trans, __PRIVATE__ curr_pos_t* curr_pos, __PRIVATE__ float3* curr_color) {
    float char_height = char_trans->scale;
    float char_width = char_trans->scale * FONT_WIDTH / FONT_HEIGHT;

    // First check if currpos x and y are even within the domain of the char.
    if (char_trans->x <= curr_pos->x && curr_pos->x <= char_trans->x + char_width && char_trans->y <= curr_pos->y &&
        curr_pos->y <= char_trans->y + char_height) {

        // Then see if the current pixel should be set to black.
        __CONSTANTREF__ int* char_symbol = &font[c][0];

        // Identify the current pixel index within the char_symbol.
        int row = (int)_round((curr_pos->y - char_trans->y) / char_height * FONT_HEIGHT);
        int col = (int)_round((curr_pos->x - char_trans->x) / char_width * FONT_WIDTH);

        if (char_symbol[row] & (1 << col)) {
            float lum;
            if (char_trans->waveform_y == 0.0) {
                lum = 0.0;
            } else {
                lum = _mix(char_trans->waveform_y, char_trans->waveform_y - char_height, (curr_pos->y - char_trans->y) / char_height);
            }
            *curr_color = make_float3(lum, lum, lum);
        }
    }
}

__DEVICE__ void draw_string(char str[], __PRIVATE__ char_trans_t* char_trans, __PRIVATE__ curr_pos_t* curr_pos, __PRIVATE__ float3* curr_color) {
    int i = 0;
    char c = str[0];
    float c_width;
    char_trans_t c_trans = *char_trans;
    while (c != '\0') {
        draw_char(c, &c_trans, curr_pos, curr_color);

        c_width = font_widths[c];
        i += 1;
        c = str[i];
        // move one char to the right the width of the last drawn char on the screen.
        c_trans.x += c_trans.scale * c_width / FONT_HEIGHT;
        c_trans.y += 0;
    }
}

//////////////////////////
// String manipulations //
//////////////////////////
__DEVICE__ void strcpy_idx(char str_src[], char str_dst[], int src_start_idx, int dst_start_idx, int num_chars) {
    for (int i = 0; i < num_chars; ++i) {
        str_dst[dst_start_idx + i] = str_src[src_start_idx + i];
    }
}

__DEVICE__ int strlen(char a[]) {
    int i = 0;
    while (a[i] != '\0' && a[i] != 0) {
        ++i;
    }
    return i;
}

__DEVICE__ void strcat(char a[], char b[], char dest[]) {
    int len_a = strlen(a);
    int len_b = strlen(b);
    if (a != dest) {
        strcpy_idx(a, dest, 0, 0, len_a);
    }
    strcpy_idx(b, dest, 0, len_a, len_b);
    dest[len_a + len_b] = '\0';
}

__DEVICE__ char digit2char(int i) {
    return (char)('0' + i);
}

__DEVICE__ void int2str(int f, char output[], int num_chars) {
    int runner = 0;

    // First char is neg sign, if necessary
    char zero[] = "0";

    if (f < 0) {
        output[runner] = '-';
        runner++;
    }
    if (f == 0) {
        strcpy_idx(zero, output, 0, runner, strlen(zero));
        // strcat(output, zero, output);
        runner += strlen(zero);
    } else {
        // input is real number, print absolute value.
        f = (int)_round(_fabs((float)f));
        // num digits before decimal point
        int left_digits = (int)(_log10f((float)f) + 1);

        // Extract left digits
        for (int i = left_digits; i > 0 && runner < num_chars; --i, ++runner) {
            float base = _powf(10.0, i - 1);
            int d = (int)_truncf((float)f / base);
            f = _fmod((float)f, base);
            output[runner] = digit2char(d);
        }
    }
    output[runner] = '\0';
}

//////////////////////////////
// DRAW RECT                //
//////////////////////////////

typedef struct {
        float x, y;          // some specified position on the screen, refers to the left end of the line.
        float width, height; // proportion of the height of the frame.
        float waveform_y;    // Y-coordinate of where this char should be on the waveform.
} rect_pos_t;

__DEVICE__ void draw_rect(__PRIVATE__ rect_pos_t* rect_pos, __PRIVATE__ curr_pos_t* curr_pos, __PRIVATE__ float3* curr_color) {
    if (rect_pos->x <= curr_pos->x && curr_pos->x <= rect_pos->x + rect_pos->width && rect_pos->y <= curr_pos->y &&
        curr_pos->y <= rect_pos->y + rect_pos->height) {
        float lum;
        if (rect_pos->waveform_y == 0.0) {
            lum = 0.0;
        } else {
            lum = _mix(rect_pos->waveform_y, rect_pos->waveform_y - rect_pos->height, -1 * (rect_pos->y - curr_pos->y) / rect_pos->height);
        }
        *curr_color = make_float3(lum, lum, lum);
    }
}

typedef struct {
        float line_thickness;
        float minor_line_width;
        int rescale_image;
        float text_scale, text_width;
        int num_repetitions;
} margin_params_t;

typedef struct {
        float low_x, low_y;   // coordinate of top left corner that's usable, 0-1 scale.
        float high_x, high_y; // coordinate of bottom right corner that's usable, 0-1 scale.
} working_area_t;

//////////////////////////////
// BT1886 NITS              //
//////////////////////////////
__DEVICE__ float gamma_24_nits_to_cv(float n) {
    return powf(n / 100.0, 1.0 / 2.4);
}

__DEVICE__ float bt1886_nits_to_cv(float l, float lw, float lb, float gamma) {
    const float a = powf(powf(lw, 1.0 / gamma) - powf(lb, 1.0 / gamma), gamma);
    const float b = powf(lb, 1.0 / gamma) / (powf(lw, 1.0 / gamma) - powf(lb, 1.0 / gamma));
    // L = a * _fmaxf((V + b), 0) ^ gamma
    float v = powf(l / a, 1.0 / gamma) - b;
    return v;
}

//////////////////////////////
// ST2084 NITS              //
//////////////////////////////
__DEVICE__ float st2084_nits_to_cv(float n) {
    // n is scaled so 1.0 is 1 nit.
    float Y = n / 10000.0; // scale 10k nits to 1.0
    const float m1 = 2610.0 / 16384.0;
    const float m2 = 128.0 * 2523.0 / 4096.0;
    const float c2 = 32.0 * 2413.0 / 4096.0;
    const float c3 = 32.0 * 2392.0 / 4096.0;
    const float c1 = c3 - c2 + 1.0;
    return powf((c1 + c2 * powf(Y, m1)) / (1.0 + c3 * powf(Y, m1)), m2);
}

#define copy_array(source, dest, num_entries)                                                                                                             \
    for (int i = 0; i < num_entries; ++i) {                                                                                                               \
        dest[i] = source[i];                                                                                                                              \
    }
#define copy_2d_array(source, dest, num_rows, num_cols)                                                                                                   \
    for (int i = 0; i < num_rows; ++i) {                                                                                                                  \
        for (int j = 0; j < num_cols; ++j) {                                                                                                              \
            dest[i][j] = source[i][j];                                                                                                                    \
        }                                                                                                                                                 \
    }

/////////////////////////////
// DRAW WAVEFORM           //
/////////////////////////////
__DEVICE__ void draw_waveform(float major_cvs[],
                              char nits_names[][10],
                              int num_major_axes,
                              float minor_cvs[],
                              int num_minor_axes,
                              __PRIVATE__ margin_params_t* margin_params,
                              __PRIVATE__ curr_pos_t* curr_pos,
                              __PRIVATE__ float3* curr_color,
                              __PRIVATE__ working_area_t* working_area) {

    const float left_axis = 0.0;
    const float left_margin_height = 1.0;
    const float left_margin_width = margin_params->text_width + margin_params->minor_line_width;
    const float bottom_margin_height = (margin_params->line_thickness * num_major_axes * margin_params->num_repetitions);
    const float major_line_width = 1.0 - left_margin_width;
    const float minor_line_width = margin_params->minor_line_width;
    const float text_scale = margin_params->text_scale;

    // Tell the caller function what space remains.
    working_area->low_x = left_margin_width;
    working_area->low_y = 0.0;
    working_area->high_x = 1.0;
    working_area->high_y = 1.0 - bottom_margin_height;

    // Black out the left margin and bottom margin.
    rect_pos_t left_margin = {0.0, 1.0 - left_margin_height, left_margin_width, left_margin_height, 0.0};
    draw_rect(&left_margin, curr_pos, curr_color);
    rect_pos_t bottom_margin = {0.0, 1.0 - bottom_margin_height, 1.0, bottom_margin_height, 0.0};
    draw_rect(&bottom_margin, curr_pos, curr_color);

    for (int i = 0; i < num_major_axes; ++i) {
        float cv = major_cvs[i];
        // Draw a wide line at the bottom of the frame somewhere.
        for (int j = 0; j < margin_params->num_repetitions; ++j) {
            rect_pos_t major_line = {left_margin_width,
                                     1.0 - ((i + 1 + num_major_axes * j) * margin_params->line_thickness),
                                     // 1.0 - cv,
                                     major_line_width,
                                     margin_params->line_thickness,
                                     cv + (margin_params->line_thickness / 2.0)};
            draw_rect(&major_line, curr_pos, curr_color);

            // Draw the text.
            float char_cv = cv + (text_scale / 2.0);
            if (i == 0) {
                char_cv += text_scale / 2.0;
            } else if (i == num_major_axes - 1) {
                char_cv -= text_scale / 2.0;
            }
            char_trans_t char_trans = {left_axis, 1.0 - (((i + 1) + num_major_axes * j) * text_scale), text_scale, char_cv};
            draw_string(nits_names[i], &char_trans, curr_pos, curr_color);
        }
    }

    for (int i = 0; i < num_minor_axes; ++i) {
        float cv = minor_cvs[i];
        for (int j = 0; j < margin_params->num_repetitions; ++j) {
            // Draw a wide line at the bottom of the frame somewhere.
            rect_pos_t minor_line = {left_margin_width - minor_line_width,
                                     1.0 - ((i + num_minor_axes * j) * margin_params->line_thickness),
                                     // 1.0 - cv,
                                     minor_line_width,
                                     margin_params->line_thickness,
                                     cv + (margin_params->line_thickness / 2.0)};
            draw_rect(&minor_line, curr_pos, curr_color);
        }
    }
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {

    curr_pos_t curr_pos = {
        (float)p_X / (float)p_Width,
        (float)p_Y / (float)p_Height,
    };
    margin_params_t margin_params = {
        line_thickness,
        minor_line_width,
        rescale_image,
        text_scale,
        text_width,
        num_repetitions,
    };
    working_area_t working_area = {0.0, 0.0, 1.0, 1.0};
    float3 curr_color = make_float3(_tex2D(p_TexR, p_X, p_Y), _tex2D(p_TexG, p_X, p_Y), _tex2D(p_TexB, p_X, p_Y));

    int num_major_axes;
    int num_minor_axes;
    float major_nits[21] = {};
    char nits_names[21][10] = {};
    float minor_nits[100] = {};

    if (waveform_scale == BT1886_NITS || waveform_scale == ST2084_NITS) {
        float max_nits;
        if (waveform_scale == ST2084_NITS) {
            max_nits = 10000.0;
        } else if (waveform_scale == BT1886_NITS) {
            max_nits = bt1886_lw;
        }

        num_major_axes = 0;
        num_minor_axes = 0;
        for (int nits = 0, next_nits = 0, j = 0; nits <= max_nits; ++j, ++num_major_axes) {
            major_nits[j] = nits;
            int2str(nits, nits_names[j], 6);
            if (nits == 0) {
                next_nits = 1;
            } else {
                next_nits = nits * 10;
            }
            for (int k = 0; k < 10; ++k, ++num_minor_axes) {
                minor_nits[j * 10 + k] = (next_nits / 10.0) * k;
            }
            nits = next_nits;
        }
    } else if (waveform_scale == BT1886_STOPS || waveform_scale == ST2084_STOPS) {
        num_major_axes = 1 + (num_stops * 2);
        num_minor_axes = 1 + (num_stops * 3 * 2);
        for (int stop = -1 * num_stops, j = 0; stop <= num_stops; ++stop, ++j) {
            major_nits[j] = mid_gray * _exp2f((float)stop);
            if (stop == 0) {
                char mid_str[4] = "MID";
                strcpy_idx(mid_str, nits_names[j], 0, 0, 4);
            } else {
                int2str(stop, nits_names[j], 4);
            }
            int substeps = 3;
            if (stop == num_stops) {
                substeps = 1;
            }
            for (int k = 0; k < substeps; ++k) {
                minor_nits[j * 3 + k] = mid_gray * _exp2f((float)stop + (k * 0.33333333));
            }
        }
    }
    if (waveform_scale == BT1886_NITS || waveform_scale == BT1886_STOPS) {
        for (int i = 0; i < num_major_axes; ++i) {
            major_nits[i] = bt1886_nits_to_cv(major_nits[i], bt1886_lw, bt1886_lb, bt1886_g);
        }
        for (int i = 0; i < num_minor_axes; ++i) {
            minor_nits[i] = bt1886_nits_to_cv(minor_nits[i], bt1886_lw, bt1886_lb, bt1886_g);
        }
    } else if (waveform_scale == ST2084_NITS || waveform_scale == ST2084_STOPS) {
        for (int i = 0; i < num_major_axes; ++i) {
            major_nits[i] = st2084_nits_to_cv(major_nits[i]);
        }
        for (int i = 0; i < num_minor_axes; ++i) {
            minor_nits[i] = st2084_nits_to_cv(minor_nits[i]);
        }
    }

    draw_waveform(major_nits, nits_names, num_major_axes, minor_nits, num_minor_axes, &margin_params, &curr_pos, &curr_color, &working_area);

    if (margin_params.rescale_image != NONE) {
        if (working_area.low_x <= curr_pos.x && curr_pos.x <= working_area.high_x && working_area.low_y <= curr_pos.y &&
            curr_pos.y <= working_area.high_y) {
            int scaled_x, scaled_y;

            if (margin_params.rescale_image == FILL) {
                scaled_x = _round(_mix(0, p_Width, (curr_pos.x - working_area.low_x) / (working_area.high_x - working_area.low_x)));
                scaled_y = _round(_mix(0, p_Height, (curr_pos.y - working_area.low_y) / (working_area.high_y - working_area.low_y)));
            } else if (margin_params.rescale_image == ASPECT) {
                // figure out if new area is wider or taller than the original image.
                float new_aspect = (working_area.high_x - working_area.low_x) / (working_area.high_y - working_area.low_y);
                float working_area_center_x = (working_area.high_x + working_area.low_x) / 2.0;
                float working_area_center_y = (working_area.high_y + working_area.low_y) / 2.0;
                if (new_aspect > 1.0) {
                    // wide, low_y->high_y should be filled.
                    scaled_x = _round(_mix(0, p_Width, ((curr_pos.x - working_area_center_x) * new_aspect + working_area_center_x) - working_area.low_x) /
                                      (working_area.high_x - working_area.low_x));
                    scaled_y = _round(_mix(0, p_Height, (curr_pos.y - working_area.low_y) / (working_area.high_y - working_area.low_y)));
                } else {
                    // tall, need low_x->high_x should be filled.
                    scaled_x = _round(_mix(0, p_Width, (curr_pos.x - working_area.low_x) / (working_area.high_x - working_area.low_x)));
                    scaled_y = _round(_mix(0, p_Height, ((curr_pos.y - working_area_center_y) / new_aspect + working_area_center_y) - working_area.low_y) /
                                      (working_area.high_y - working_area.low_y));
                }
            }
            if (scaled_x < 0 || scaled_x > p_Width || scaled_y < 0 || scaled_y > p_Height) {
                curr_color = make_float3(0.0, 0.0, 0.0);
            } else {
                curr_color = make_float3(_tex2D(p_TexR, scaled_x, scaled_y), _tex2D(p_TexG, scaled_x, scaled_y), _tex2D(p_TexB, scaled_x, scaled_y));
            }
        }
    }
    return curr_color;
}
