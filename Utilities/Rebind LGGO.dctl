#line 2

// clang-format off

DEFINE_UI_PARAMS(mid_gray, Mid Gray, DCTLUI_VALUE_BOX, 0.18)
DEFINE_UI_PARAMS(film_negative_gamma, Film Negative Gamma, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(invert_gamma_direction, Flip Gamma Dir, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(invert_mid_gray_gamma_direction, Flip Mid Gray Pres. Gamma Dir, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(mode, Mode, DCTLUI_COMBO_BOX, 1, {MODE_REFERENCE, MODE_CAPTURE}, {Inject Patches, Rebind Controls})
DEFINE_UI_PARAMS(wheels, Wheels, DCTLUI_COMBO_BOX, 0, {WHEELS_LGG, WHEELS_OGG}, {Lift Gamma Gain, Gamma Gain Offset})

DEFINE_UI_PARAMS(lift_wheel_rebind, Lift Wheel Rebind, DCTLUI_COMBO_BOX, 0, {LIFT_REBIND_TO_LIFT, LIFT_REBIND_TO_GAMMA, LIFT_REBIND_TO_MID_GRAY_PRESERVING_GAMMA, LIFT_REBIND_TO_GAIN, LIFT_REBIND_TO_NORMALIZED_GAIN, LIFT_REBIND_TO_OFFSET, LIFT_REBIND_TO_MIN_NORMALIZED_OFFSET}, {Lift, Gamma, Mid Gray Pres. Gamma, Gain, Max Normalized Gain, Offset, Min Normalized Offset})
DEFINE_UI_PARAMS(gamma_wheel_rebind, Gamma Wheel Rebind, DCTLUI_COMBO_BOX, 1, {GAMMA_REBIND_TO_LIFT, GAMMA_REBIND_TO_GAMMA, GAMMA_REBIND_TO_MID_GRAY_PRESERVING_GAMMA, GAMMA_REBIND_TO_GAIN, GAMMA_REBIND_TO_NORMALIZED_GAIN, GAMMA_REBIND_TO_OFFSET, GAMMA_REBIND_TO_MIN_NORMALIZED_OFFSET,}, {Lift, Gamma, Mid Gray Pres. Gamma, Gain, Max Normalized Gain, Offset, Min Normalized Offset})
DEFINE_UI_PARAMS(gain_wheel_rebind, Gain Wheel Rebind, DCTLUI_COMBO_BOX, 3, {GAIN_REBIND_TO_LIFT, GAIN_REBIND_TO_GAMMA, GAIN_REBIND_TO_MID_GRAY_PRESERVING_GAMMA, GAIN_REBIND_TO_GAIN, GAIN_REBIND_TO_NORMALIZED_GAIN, GAIN_REBIND_TO_OFFSET, GAIN_REBIND_TO_MIN_NORMALIZED_OFFSET,}, {Lift, Gamma, Mid Gray Pres. Gamma, Gain, Max Normalized Gain, Offset, Min Normalized Offset})
DEFINE_UI_PARAMS(offset_wheel_rebind, Offset Wheel Rebind, DCTLUI_COMBO_BOX, 5, {OFFSET_REBIND_TO_LIFT, OFFSET_REBIND_TO_GAMMA, OFFSET_REBIND_TO_MID_GRAY_PRESERVING_GAMMA, OFFSET_REBIND_TO_GAIN, OFFSET_REBIND_TO_NORMALIZED_GAIN, OFFSET_REBIND_TO_OFFSET, OFFSET_REBIND_TO_MIN_NORMALIZED_OFFSET, OFFSET_REBIND_TO_PRINTER_LIGHTS_EXPOSURE}, {Lift, Gamma, Mid Gray Pres. Gamma, Gain, Max Normalized Gain, Offset, Min Normalized Offset, Printer Lights Gain})

// DEFINE_UI_PARAMS(debug_mode, Debug Mode, DCTLUI_COMBO_BOX, 0, {DEBUG_NONE, DEBUG_LIFT, DEBUG_GAMMA, DEBUG_MID_GAMMA, DEBUG_GAIN, DEBUG_OFFSET, DEBUG_INVERSE}, {Debug None, Debug Lift, Debug Gamma, Debug Mid Gamma, Debug Gain, Debug Offset, Debug Inverse})
// clang-format on

// OFFSET_SCALING is a magic number measured from the default offset wheel values in Resolve.
#define OFFSET_SCALING ((1.233137392 - 0.5) / 100.0)
#define PRINTER_LIGHT_BASE (25.0)

// typedef struct {
//         int x;
//         int y;
// } int2;

// __DEVICE__ int2 make_int2(int x, int y) {
//     int2 result = {};
//     result.x = x;
//     result.y = y;
//     return result;
// }

__DEVICE__ inline bool int2_eq(int2 a, int2 b) {
    return a.x == b.x && a.y == b.y;
}

__DEVICE__ float3 sample_color(int2 pos, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    return make_float3(_tex2D(p_TexR, pos.x, pos.y), _tex2D(p_TexG, pos.x, pos.y), _tex2D(p_TexB, pos.x, pos.y));
}

__DEVICE__ float convert_gamma_to_reals(float g) {
    // Converts -1 to +1 range to an exponent
    // Essentially what Resolve does with its gamma
    // correction.
    float out;
    if (g <= 0) {
        out = 1.0f + (-4.0f * g);
    } else {
        out = 1.0f / (4.0f * g + 1);
    }
    return out;
}

__DEVICE__ float convert_gamma_to_wheels(float g) {
    // Converts the exponent we have to the gamma wheel control (-1 to +1 range)
    float out;
    if (g >= 1.0) {
        out = (g - 1.0f) / -4.0;
    } else {
        out = ((1.0 / g) - 1.0) / 4.0;
    }
    return out;
}

__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

/**
 * Other color operations
 */
__DEVICE__ float mid_gray_preserving_gamma(float x, float exp, float mid_gray) {
    // Uses a gain adjustment to preserve linear mid gray.
    float out = x;
    out /= mid_gray;
    out = powf(out, exp);
    out *= mid_gray;
    return out;
}

__DEVICE__ float rec709_luminance(float3 rgb) {
    return (0.212639 * rgb.x) + (0.715169 * rgb.y) + (0.072192 * rgb.z);
}

__DEVICE__ float printer_lights_gain(float lights, float neg_gamma) {
    // Returns exposure adjustment corresponding to this printer lights setting.
    return _exp10f((lights - PRINTER_LIGHT_BASE) * 0.025 / neg_gamma);
}

/**
 * Solve for gamma given samples of 0.0, 0.5, 1.0, respectively.
 */
__DEVICE__ float gamma_error_function(float gamma, float a, float b, float c) {
    float term1 = powf(c, 1.0 / gamma);
    float term2 = powf(b, 1.0 / gamma);
    float term3 = powf(a, 1.0 / gamma);
    return powf(term1 - term2 + term3, gamma) - b;
}

__DEVICE__ float
continuous_binary_search(float initial_guess, float a, float b, float c, float tolerance, int max_iterations, float lower_bound, float upper_bound) {
    float gamma = initial_guess;
    bool pos_slope = gamma_error_function(lower_bound + 0.01, a, b, c) < gamma_error_function(upper_bound, a, b, c);
    const float boundary_expansion = 1.01;
    for (int i = 0; i < max_iterations; ++i) {
        float value = gamma_error_function(gamma, a, b, c);
        float error = _fabs(value);
        if (error < tolerance) {
            break;
        }
        if ((pos_slope && value > 0) || (!pos_slope && value < 0)) {
            upper_bound = gamma;
        } else {
            lower_bound = gamma;
        }
        gamma = (lower_bound + upper_bound) / 2;
        float boundary_distance = upper_bound - gamma;
        upper_bound = gamma + boundary_distance * boundary_expansion;
        lower_bound = gamma - boundary_distance * boundary_expansion;
    }
    return gamma;
}

__DEVICE__ float find_gamma(float black, float gray, float white) {
    float initial_guess = _logf((gray - black) / (white - black)) / _logf(0.5);
    float tolerance = 1e-7;
    int max_iterations = 30;
    float lower_bound = 0.0;
    float upper_bound = 5.0;
    return continuous_binary_search(initial_guess, black, gray, white, tolerance, max_iterations, lower_bound, upper_bound);
}

/**
 * Remembering LGG, OGG, and LGGO parameters
 */
typedef struct {
        float lift;
        float gamma;
        float gain;
        // Assumed to be wheels params.
} lgg_params_t;

typedef lgg_params_t lgg_params_reals_t;

typedef struct {
        float offset;
        float gamma;
        float gain;
        // Assumed to be wheels params.
} ogg_params_t;

typedef ogg_params_t ogg_params_reals_t;

__DEVICE__ lgg_params_t make_lgg_params(float lift, float gamma, float gain) {
    lgg_params_t result = {};
    result.lift = lift;
    result.gamma = gamma;
    result.gain = gain;
    return result;
}

__DEVICE__ lgg_params_reals_t make_lgg_params_reals(float lift, float gamma, float gain) {
    return (lgg_params_reals_t)make_lgg_params(lift, gamma, gain);
}

__DEVICE__ ogg_params_t make_ogg_params(float offset, float gamma, float gain) {
    ogg_params_t result = {};
    result.offset = offset;
    result.gamma = gamma;
    result.gain = gain;
    return result;
}

__DEVICE__ ogg_params_reals_t make_ogg_params_reals(float offset, float gamma, float gain) {
    return (ogg_params_reals_t)make_ogg_params(offset, gamma, gain);
}

__DEVICE__ float apply_lgg(float x, lgg_params_reals_t params, bool invert) {
    float out = x;
    float white_out_x = 1.0 / params.gain;
    float black_out_x = (1.0 - (1.0 / (1.0 - params.lift)));
    float slope = 1.0 / (white_out_x - black_out_x);
    if (invert) {
        out = powf(out, 1.0 / params.gamma);
        out = out / slope;
        out = out + black_out_x;
    } else {
        out = slope * (x - black_out_x);
        out = powf(out, params.gamma);
    }
    return out;
}

__DEVICE__ float apply_ogg(float x, ogg_params_reals_t params, bool invert) {
    float out = x;
    if (invert) {
        out = powf(out, 1.0 / params.gamma);
        out = out - params.offset;
        out = out / params.gain;
    } else {
        out = out * params.gain;
        out = out + params.offset;
        out = powf(out, params.gamma);
    }
    return out;
}

__DEVICE__ lgg_params_reals_t ogg_to_lgg_params(ogg_params_reals_t ogg_params) {
    float gamma = ogg_params.gamma;
    float slope = ogg_params.gain;
    float black_out_x = ogg_params.offset * -1.0 / slope;
    float white_out_x = 1.0 / slope + black_out_x;
    float gain = 1.0 / white_out_x;
    float lift = 1.0 - (1.0 / (1.0 - black_out_x));
    return make_lgg_params(lift, gamma, gain);
}

__DEVICE__ ogg_params_reals_t lgg_to_ogg_params(lgg_params_reals_t lgg_params) {
    float gamma = lgg_params.gamma;
    float white_out_x = 1.0 / lgg_params.gain;
    float black_out_x = (1.0 - (1.0 / (1.0 - lgg_params.lift)));
    float slope = 1.0 / (white_out_x - black_out_x);

    float gain = slope;
    float offset = slope * -1 * black_out_x;
    return make_ogg_params(offset, gamma, gain);
}

__DEVICE__ ogg_params_reals_t estimate_ogg(float black, float gray, float white) {
    float gamma = find_gamma(black, gray, white);
    float offset = powf(black, 1.0 / gamma);
    float gain = powf(white, 1.0 / gamma) - offset;
    return make_ogg_params(offset, gamma, gain);
}

__DEVICE__ lgg_params_reals_t estimate_lgg(float black, float gray, float white) {
    return ogg_to_lgg_params(estimate_ogg(black, gray, white));
}

typedef struct {
        float lift;
        float gamma;
        float mid_gamma;
        float gain;
        float offset;
        // Assumed to be wheels params.
} lggo_params_t;

typedef lggo_params_t lggo_params_reals_t;

__DEVICE__ lggo_params_t make_lggo_params(float lift, float gamma, float mid_gamma, float gain, float offset) {
    lggo_params_t result = {};
    result.lift = lift;
    result.gamma = gamma;
    result.mid_gamma = mid_gamma; // gamma used for mid gray preserving gamma
    result.gain = gain;
    result.offset = offset;
    return result;
}

__DEVICE__ lggo_params_reals_t lgg_to_lggo_params(lgg_params_reals_t lgg_params) {
    return make_lggo_params(lgg_params.lift, lgg_params.gamma, 1.0, lgg_params.gain, 0.0);
}

__DEVICE__ lggo_params_reals_t ogg_to_lggo_params(ogg_params_reals_t ogg_params) {
    return make_lggo_params(0.0, ogg_params.gamma, 1.0, ogg_params.gain, ogg_params.offset);
}

__DEVICE__ lggo_params_reals_t make_lggo_params_reals(float lift, float gamma, float mid_gamma, float gain, float offset) {
    return (lggo_params_reals_t)make_lggo_params(lift, gamma, mid_gamma, gain, offset);
}

__DEVICE__ lggo_params_reals_t convert_lggo_to_reals(lggo_params_t params) {
    // Convert each of the parameters from the Resolve wheels values to the underlying real values.
    return make_lggo_params(params.lift * 2.0,
                            convert_gamma_to_reals(params.gamma),
                            convert_gamma_to_reals(params.mid_gamma),
                            params.gain,
                            (params.offset - PRINTER_LIGHT_BASE) * OFFSET_SCALING);
}

__DEVICE__ lggo_params_t convert_lggo_to_wheels(lggo_params_reals_t params) {
    // Convert each of the parameters from the underlying real values to the Resolve wheels values.
    return make_lggo_params(params.lift / 2.0,
                            convert_gamma_to_wheels(params.gamma),
                            convert_gamma_to_wheels(params.mid_gamma),
                            params.gain,
                            (params.offset / OFFSET_SCALING) + PRINTER_LIGHT_BASE);
}

__DEVICE__ float convert_offset_real_to_printer_lights(float offset) {
    return (offset / OFFSET_SCALING) + PRINTER_LIGHT_BASE;
}

__DEVICE__ float convert_offset_printer_lights_to_real(float offset) {
    return (offset - PRINTER_LIGHT_BASE) * OFFSET_SCALING;
}

__DEVICE__ float apply_lggo(float x, lggo_params_reals_t params, bool invert, float mid_gray) {
    float white_out_x = 1.0 / params.gain;
    float black_out_x = (1.0 - (1.0 / (1.0 - params.lift)));
    float slope = 1.0 / (white_out_x - black_out_x);
    float out = x;

    if (invert) {
        out = mid_gray_preserving_gamma(out, 1.0 / params.mid_gamma, mid_gray);
        out = powf(out, 1.0 / params.gamma);
        out = out - params.offset;
        out = out / slope;
        out = out + black_out_x;
    } else {
        out = slope * (out - black_out_x);
        out = out + params.offset;
        out = powf(out, params.gamma);
        out = mid_gray_preserving_gamma(out, params.mid_gamma, mid_gray);
    }
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float3 output_color;

    int2 white_corner = make_int2(0, 0);
    int2 black_corner = make_int2(p_Width - 1, 0);
    int2 gray_corner = make_int2(0, p_Height - 1);

    int2 curr_pos = make_int2(p_X, p_Y);

    if (mode == MODE_REFERENCE) {
        if (int2_eq(curr_pos, white_corner)) {
            output_color = make_float3(1.0, 1.0, 1.0);
        } else if (int2_eq(curr_pos, black_corner)) {
            output_color = make_float3(0.0, 0.0, 0.0);
        } else if (int2_eq(curr_pos, gray_corner)) {
            output_color = make_float3(0.5, 0.5, 0.5);
        } else {
            output_color = make_float3(_tex2D(p_TexR, p_X, p_Y), _tex2D(p_TexG, p_X, p_Y), _tex2D(p_TexB, p_X, p_Y));
        }

    } else if (mode == MODE_CAPTURE) {
        float3 curr_white = sample_color(white_corner, p_TexR, p_TexG, p_TexB);
        float3 curr_black = sample_color(black_corner, p_TexR, p_TexG, p_TexB);
        float3 curr_gray = sample_color(gray_corner, p_TexR, p_TexG, p_TexB);
        float3 curr_color = sample_color(curr_pos, p_TexR, p_TexG, p_TexB);

        // If we are on one of the three corners, we must clone stamp over it.
        if (int2_eq(curr_pos, white_corner)) {
            // average right and below pixel to clone over it.
            float3 right_pixel = sample_color(make_int2(white_corner.x + 1, white_corner.y), p_TexR, p_TexG, p_TexB);
            float3 down_pixel = sample_color(make_int2(white_corner.x, white_corner.y + 1), p_TexR, p_TexG, p_TexB);
            curr_color = (right_pixel + down_pixel) / 2.0f;
        } else if (int2_eq(curr_pos, black_corner)) {
            float3 left_pixel = sample_color(make_int2(black_corner.x - 1, black_corner.y), p_TexR, p_TexG, p_TexB);
            float3 down_pixel = sample_color(make_int2(black_corner.x, black_corner.y + 1), p_TexR, p_TexG, p_TexB);
            curr_color = (left_pixel + down_pixel) / 2.0f;
        } else if (int2_eq(curr_pos, gray_corner)) {
            float3 right_pixel = sample_color(make_int2(gray_corner.x + 1, gray_corner.y), p_TexR, p_TexG, p_TexB);
            float3 up_pixel = sample_color(make_int2(gray_corner.x, gray_corner.y - 1), p_TexR, p_TexG, p_TexB);
            curr_color = (right_pixel + up_pixel) / 2.0f;
        }

        output_color = curr_color;

        lggo_params_reals_t lggo_params_r;
        lggo_params_reals_t lggo_params_g;
        lggo_params_reals_t lggo_params_b;

        if (wheels == WHEELS_LGG) {
            lgg_params_reals_t lgg_params_r = estimate_lgg(curr_black.x, curr_gray.x, curr_white.x);
            lgg_params_reals_t lgg_params_g = estimate_lgg(curr_black.y, curr_gray.y, curr_white.y);
            lgg_params_reals_t lgg_params_b = estimate_lgg(curr_black.z, curr_gray.z, curr_white.z);

            lggo_params_r = lgg_to_lggo_params(lgg_params_r);
            lggo_params_g = lgg_to_lggo_params(lgg_params_g);
            lggo_params_b = lgg_to_lggo_params(lgg_params_b);

        } else if (wheels == WHEELS_OGG) {
            ogg_params_t ogg_params_r = estimate_ogg(curr_black.x, curr_gray.x, curr_white.x);
            ogg_params_t ogg_params_g = estimate_ogg(curr_black.y, curr_gray.y, curr_white.y);
            ogg_params_t ogg_params_b = estimate_ogg(curr_black.z, curr_gray.z, curr_white.z);

            lggo_params_r = ogg_to_lggo_params(ogg_params_r);
            lggo_params_g = ogg_to_lggo_params(ogg_params_g);
            lggo_params_b = ogg_to_lggo_params(ogg_params_b);
        }

        // Invert original adjustments.
        output_color.x = apply_lggo(output_color.x, lggo_params_r, true, mid_gray);
        output_color.y = apply_lggo(output_color.y, lggo_params_g, true, mid_gray);
        output_color.z = apply_lggo(output_color.z, lggo_params_b, true, mid_gray);
        // if (debug_mode == DEBUG_INVERSE) {
        //     return output_color;
        // }

        // Modify lggo parameters according to rebindings.
        // Original wheel settings
        lggo_params_t lggo_params_r_wheels = convert_lggo_to_wheels(lggo_params_r);
        lggo_params_t lggo_params_g_wheels = convert_lggo_to_wheels(lggo_params_g);
        lggo_params_t lggo_params_b_wheels = convert_lggo_to_wheels(lggo_params_b);
        float offset_real_r = lggo_params_r.offset;
        float offset_real_g = lggo_params_g.offset;
        float offset_real_b = lggo_params_b.offset;
        // New ones to write to
        lggo_params_t default_wheels = make_lggo_params(0.0, 0.0, 0.0, 1.0, PRINTER_LIGHT_BASE);
        lggo_params_t new_lggo_params_r_wheels = default_wheels;
        lggo_params_t new_lggo_params_g_wheels = default_wheels;
        lggo_params_t new_lggo_params_b_wheels = default_wheels;

        float gamma_flip = invert_gamma_direction ? -1.0 : 1.0;
        float mid_gray_gamma_flip = invert_mid_gray_gamma_direction ? -1.0 : 1.0;

        if (wheels == WHEELS_LGG) {
            if (lift_wheel_rebind == LIFT_REBIND_TO_LIFT) {
                new_lggo_params_r_wheels.lift += lggo_params_r_wheels.lift;
                new_lggo_params_g_wheels.lift += lggo_params_g_wheels.lift;
                new_lggo_params_b_wheels.lift += lggo_params_b_wheels.lift;
            } else if (lift_wheel_rebind == LIFT_REBIND_TO_GAMMA) {
                new_lggo_params_r_wheels.gamma += lggo_params_r_wheels.lift * gamma_flip;
                new_lggo_params_g_wheels.gamma += lggo_params_g_wheels.lift * gamma_flip;
                new_lggo_params_b_wheels.gamma += lggo_params_b_wheels.lift * gamma_flip;
            } else if (lift_wheel_rebind == LIFT_REBIND_TO_MID_GRAY_PRESERVING_GAMMA) {
                new_lggo_params_r_wheels.mid_gamma += lggo_params_r_wheels.lift * mid_gray_gamma_flip;
                new_lggo_params_g_wheels.mid_gamma += lggo_params_g_wheels.lift * mid_gray_gamma_flip;
                new_lggo_params_b_wheels.mid_gamma += lggo_params_b_wheels.lift * mid_gray_gamma_flip;
            } else if (lift_wheel_rebind == LIFT_REBIND_TO_GAIN) {
                new_lggo_params_r_wheels.gain *= _fmaxf(lggo_params_r_wheels.lift + 1.0, 0.0);
                new_lggo_params_g_wheels.gain *= _fmaxf(lggo_params_g_wheels.lift + 1.0, 0.0);
                new_lggo_params_b_wheels.gain *= _fmaxf(lggo_params_b_wheels.lift + 1.0, 0.0);
            } else if (lift_wheel_rebind == LIFT_REBIND_TO_NORMALIZED_GAIN) {
                float3 gains = make_float3(_fmaxf(lggo_params_r_wheels.lift + 1.0, 0.0),
                                           _fmaxf(lggo_params_g_wheels.lift + 1.0, 0.0),
                                           _fmaxf(lggo_params_b_wheels.lift + 1.0, 0.0));
                float max_gain = _fmaxf(gains.x, _fmaxf(gains.y, gains.z));
                float luminance = rec709_luminance(gains); // initially 1.0
                float exposure_adjustment = luminance;
                new_lggo_params_r_wheels.gain *= (gains.x / max_gain) * exposure_adjustment;
                new_lggo_params_g_wheels.gain *= (gains.y / max_gain) * exposure_adjustment;
                new_lggo_params_b_wheels.gain *= (gains.z / max_gain) * exposure_adjustment;
            } else if (lift_wheel_rebind == LIFT_REBIND_TO_OFFSET) {
                new_lggo_params_r_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_r_wheels.lift) - PRINTER_LIGHT_BASE;
                new_lggo_params_g_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_g_wheels.lift) - PRINTER_LIGHT_BASE;
                new_lggo_params_b_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_b_wheels.lift) - PRINTER_LIGHT_BASE;
            } else if (lift_wheel_rebind == LIFT_REBIND_TO_MIN_NORMALIZED_OFFSET) {
                float3 offsets = make_float3(lggo_params_r_wheels.lift, lggo_params_g_wheels.lift, lggo_params_b_wheels.lift);
                float min_offset = _fminf(offsets.x, _fminf(offsets.y, offsets.z));
                float luminance = rec709_luminance(offsets); // initially 0.0.

                new_lggo_params_r_wheels.offset += convert_offset_real_to_printer_lights(offsets.x - min_offset + luminance) - PRINTER_LIGHT_BASE;
                new_lggo_params_g_wheels.offset += convert_offset_real_to_printer_lights(offsets.y - min_offset + luminance) - PRINTER_LIGHT_BASE;
                new_lggo_params_b_wheels.offset += convert_offset_real_to_printer_lights(offsets.z - min_offset + luminance) - PRINTER_LIGHT_BASE;
            }
        }

        if (gamma_wheel_rebind == GAMMA_REBIND_TO_LIFT) {
            new_lggo_params_r_wheels.lift += lggo_params_r_wheels.gamma;
            new_lggo_params_g_wheels.lift += lggo_params_g_wheels.gamma;
            new_lggo_params_b_wheels.lift += lggo_params_b_wheels.gamma;
        } else if (gamma_wheel_rebind == GAMMA_REBIND_TO_GAMMA) {
            new_lggo_params_r_wheels.gamma += lggo_params_r_wheels.gamma * gamma_flip;
            new_lggo_params_g_wheels.gamma += lggo_params_g_wheels.gamma * gamma_flip;
            new_lggo_params_b_wheels.gamma += lggo_params_b_wheels.gamma * gamma_flip;
        } else if (gamma_wheel_rebind == GAMMA_REBIND_TO_MID_GRAY_PRESERVING_GAMMA) {
            new_lggo_params_r_wheels.mid_gamma += lggo_params_r_wheels.gamma * mid_gray_gamma_flip;
            new_lggo_params_g_wheels.mid_gamma += lggo_params_g_wheels.gamma * mid_gray_gamma_flip;
            new_lggo_params_b_wheels.mid_gamma += lggo_params_b_wheels.gamma * mid_gray_gamma_flip;
        } else if (gamma_wheel_rebind == GAMMA_REBIND_TO_GAIN) {
            new_lggo_params_r_wheels.gain *= _fmaxf(lggo_params_r_wheels.gamma + 1.0, 0.0);
            new_lggo_params_g_wheels.gain *= _fmaxf(lggo_params_g_wheels.gamma + 1.0, 0.0);
            new_lggo_params_b_wheels.gain *= _fmaxf(lggo_params_b_wheels.gamma + 1.0, 0.0);
        } else if (gamma_wheel_rebind == GAMMA_REBIND_TO_NORMALIZED_GAIN) {
            float3 gains = make_float3(_fmaxf(lggo_params_r_wheels.gamma + 1.0, 0.0),
                                       _fmaxf(lggo_params_g_wheels.gamma + 1.0, 0.0),
                                       _fmaxf(lggo_params_b_wheels.gamma + 1.0, 0.0));
            float max_gain = _fmaxf(gains.x, _fmaxf(gains.y, gains.z));
            float luminance = rec709_luminance(gains); // initially 1.0
            float exposure_adjustment = luminance;
            new_lggo_params_r_wheels.gain *= (gains.x / max_gain) * exposure_adjustment;
            new_lggo_params_g_wheels.gain *= (gains.y / max_gain) * exposure_adjustment;
            new_lggo_params_b_wheels.gain *= (gains.z / max_gain) * exposure_adjustment;
        } else if (gamma_wheel_rebind == GAMMA_REBIND_TO_OFFSET) {
            new_lggo_params_r_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_r_wheels.gamma) - PRINTER_LIGHT_BASE;
            new_lggo_params_g_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_g_wheels.gamma) - PRINTER_LIGHT_BASE;
            new_lggo_params_b_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_b_wheels.gamma) - PRINTER_LIGHT_BASE;
        } else if (gamma_wheel_rebind == GAMMA_REBIND_TO_MIN_NORMALIZED_OFFSET) {
            float3 offsets = make_float3(lggo_params_r_wheels.gamma, lggo_params_g_wheels.gamma, lggo_params_b_wheels.gamma);
            float min_offset = _fminf(offsets.x, _fminf(offsets.y, offsets.z));
            float luminance = rec709_luminance(offsets); // initially 0.0.

            new_lggo_params_r_wheels.offset += convert_offset_real_to_printer_lights(offsets.x - min_offset + luminance) - PRINTER_LIGHT_BASE;
            new_lggo_params_g_wheels.offset += convert_offset_real_to_printer_lights(offsets.y - min_offset + luminance) - PRINTER_LIGHT_BASE;
            new_lggo_params_b_wheels.offset += convert_offset_real_to_printer_lights(offsets.z - min_offset + luminance) - PRINTER_LIGHT_BASE;
        }

        if (gain_wheel_rebind == GAIN_REBIND_TO_GAIN) {
            new_lggo_params_r_wheels.gain *= lggo_params_r_wheels.gain;
            new_lggo_params_g_wheels.gain *= lggo_params_g_wheels.gain;
            new_lggo_params_b_wheels.gain *= lggo_params_b_wheels.gain;
        } else if (gain_wheel_rebind == GAIN_REBIND_TO_LIFT) {
            new_lggo_params_r_wheels.lift += (lggo_params_r_wheels.gain - 1.0);
            new_lggo_params_g_wheels.lift += (lggo_params_g_wheels.gain - 1.0);
            new_lggo_params_b_wheels.lift += (lggo_params_b_wheels.gain - 1.0);
        } else if (gain_wheel_rebind == GAIN_REBIND_TO_NORMALIZED_GAIN) {
            float3 gains = make_float3(lggo_params_r_wheels.gain, lggo_params_g_wheels.gain, lggo_params_b_wheels.gain);
            float max_gain = _fmaxf(gains.x, _fmaxf(gains.y, gains.z));
            float luminance = rec709_luminance(gains); // initially 1.0
            float exposure_adjustment = luminance;
            new_lggo_params_r_wheels.gain *= (gains.x / max_gain) * exposure_adjustment;
            new_lggo_params_g_wheels.gain *= (gains.y / max_gain) * exposure_adjustment;
            new_lggo_params_b_wheels.gain *= (gains.z / max_gain) * exposure_adjustment;
        } else if (gain_wheel_rebind == GAIN_REBIND_TO_GAMMA) {
            new_lggo_params_r_wheels.gamma += _clampf(lggo_params_r_wheels.gain - 1.0, -1.0, 1.0) * gamma_flip;
            new_lggo_params_g_wheels.gamma += _clampf(lggo_params_g_wheels.gain - 1.0, -1.0, 1.0) * gamma_flip;
            new_lggo_params_b_wheels.gamma += _clampf(lggo_params_b_wheels.gain - 1.0, -1.0, 1.0) * gamma_flip;
        } else if (gain_wheel_rebind == GAIN_REBIND_TO_MID_GRAY_PRESERVING_GAMMA) {
            new_lggo_params_r_wheels.mid_gamma += _clampf(lggo_params_r_wheels.gain - 1.0, -1.0, 1.0) * mid_gray_gamma_flip;
            new_lggo_params_g_wheels.mid_gamma += _clampf(lggo_params_g_wheels.gain - 1.0, -1.0, 1.0) * mid_gray_gamma_flip;
            new_lggo_params_b_wheels.mid_gamma += _clampf(lggo_params_b_wheels.gain - 1.0, -1.0, 1.0) * mid_gray_gamma_flip;
        } else if (gain_wheel_rebind == GAIN_REBIND_TO_OFFSET) {
            new_lggo_params_r_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_r_wheels.gain - 1.0) - PRINTER_LIGHT_BASE;
            new_lggo_params_g_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_g_wheels.gain - 1.0) - PRINTER_LIGHT_BASE;
            new_lggo_params_b_wheels.offset += convert_offset_real_to_printer_lights(lggo_params_b_wheels.gain - 1.0) - PRINTER_LIGHT_BASE;
        } else if (gain_wheel_rebind == GAIN_REBIND_TO_MIN_NORMALIZED_OFFSET) {
            float3 offsets = make_float3(lggo_params_r_wheels.gain - 1.0, lggo_params_g_wheels.gain - 1.0, lggo_params_b_wheels.gain - 1.0);
            float min_offset = _fminf(offsets.x, _fminf(offsets.y, offsets.z));
            float luminance = rec709_luminance(offsets); // initially 0.0.

            new_lggo_params_r_wheels.offset += convert_offset_real_to_printer_lights(offsets.x - min_offset + luminance) - PRINTER_LIGHT_BASE;
            new_lggo_params_g_wheels.offset += convert_offset_real_to_printer_lights(offsets.y - min_offset + luminance) - PRINTER_LIGHT_BASE;
            new_lggo_params_b_wheels.offset += convert_offset_real_to_printer_lights(offsets.z - min_offset + luminance) - PRINTER_LIGHT_BASE;
        }

        if (wheels == WHEELS_OGG) {
            if (offset_wheel_rebind == OFFSET_REBIND_TO_OFFSET) {
                new_lggo_params_r_wheels.offset += lggo_params_r_wheels.offset - PRINTER_LIGHT_BASE;
                new_lggo_params_g_wheels.offset += lggo_params_g_wheels.offset - PRINTER_LIGHT_BASE;
                new_lggo_params_b_wheels.offset += lggo_params_b_wheels.offset - PRINTER_LIGHT_BASE;
            } else if (offset_wheel_rebind == OFFSET_REBIND_TO_LIFT) {
                new_lggo_params_r_wheels.lift += offset_real_r;
                new_lggo_params_g_wheels.lift += offset_real_g;
                new_lggo_params_b_wheels.lift += offset_real_b;
            } else if (offset_wheel_rebind == OFFSET_REBIND_TO_GAMMA) {
                new_lggo_params_r_wheels.gamma += offset_real_r * gamma_flip;
                new_lggo_params_g_wheels.gamma += offset_real_g * gamma_flip;
                new_lggo_params_b_wheels.gamma += offset_real_b * gamma_flip;
            } else if (offset_wheel_rebind == OFFSET_REBIND_TO_MID_GRAY_PRESERVING_GAMMA) {
                new_lggo_params_r_wheels.mid_gamma += offset_real_r * mid_gray_gamma_flip;
                new_lggo_params_g_wheels.mid_gamma += offset_real_g * mid_gray_gamma_flip;
                new_lggo_params_b_wheels.mid_gamma += offset_real_b * mid_gray_gamma_flip;
            } else if (offset_wheel_rebind == OFFSET_REBIND_TO_GAIN) {
                new_lggo_params_r_wheels.gain *= _fmaxf(offset_real_r + 1.0, 0.0);
                new_lggo_params_g_wheels.gain *= _fmaxf(offset_real_g + 1.0, 0.0);
                new_lggo_params_b_wheels.gain *= _fmaxf(offset_real_b + 1.0, 0.0);
            } else if (offset_wheel_rebind == OFFSET_REBIND_TO_NORMALIZED_GAIN) {
                float3 gains = make_float3(_fmaxf(offset_real_r + 1.0, 0.0), _fmaxf(offset_real_g + 1.0, 0.0), _fmaxf(offset_real_b + 1.0, 0.0));
                float max_gain = _fmaxf(gains.x, _fmaxf(gains.y, gains.z));
                float luminance = rec709_luminance(gains); // initially 1.0
                float exposure_adjustment = luminance;
                new_lggo_params_r_wheels.gain *= (gains.x / max_gain) * exposure_adjustment;
                new_lggo_params_g_wheels.gain *= (gains.y / max_gain) * exposure_adjustment;
                new_lggo_params_b_wheels.gain *= (gains.z / max_gain) * exposure_adjustment;
            } else if (offset_wheel_rebind == OFFSET_REBIND_TO_PRINTER_LIGHTS_EXPOSURE) {
                new_lggo_params_r_wheels.gain *= printer_lights_gain(lggo_params_r_wheels.offset, film_negative_gamma);
                new_lggo_params_g_wheels.gain *= printer_lights_gain(lggo_params_g_wheels.offset, film_negative_gamma);
                new_lggo_params_b_wheels.gain *= printer_lights_gain(lggo_params_b_wheels.offset, film_negative_gamma);
            } else if (offset_wheel_rebind == OFFSET_REBIND_TO_MIN_NORMALIZED_OFFSET) {
                float3 offsets = make_float3(offset_real_r, offset_real_g, offset_real_b);
                float min_offset = _fminf(offsets.x, _fminf(offsets.y, offsets.z));
                float luminance = rec709_luminance(offsets); // initially 0.0.

                new_lggo_params_r_wheels.offset += convert_offset_real_to_printer_lights(offsets.x - min_offset + luminance) - PRINTER_LIGHT_BASE;
                new_lggo_params_g_wheels.offset += convert_offset_real_to_printer_lights(offsets.y - min_offset + luminance) - PRINTER_LIGHT_BASE;
                new_lggo_params_b_wheels.offset += convert_offset_real_to_printer_lights(offsets.z - min_offset + luminance) - PRINTER_LIGHT_BASE;
            }
        }

        // if (debug_mode == DEBUG_LIFT) {
        //     return make_float3(new_lggo_params_r_wheels.lift, new_lggo_params_g_wheels.lift, new_lggo_params_b_wheels.lift);
        // }
        // if (debug_mode == DEBUG_GAMMA) {
        //     return make_float3(new_lggo_params_r_wheels.gamma, new_lggo_params_g_wheels.gamma, new_lggo_params_b_wheels.gamma);
        // }
        // if (debug_mode == DEBUG_MID_GAMMA) {
        //     return make_float3(new_lggo_params_r_wheels.mid_gamma, new_lggo_params_g_wheels.mid_gamma,
        //     new_lggo_params_b_wheels.mid_gamma);
        // }
        // if (debug_mode == DEBUG_GAIN) {
        //     return make_float3(new_lggo_params_r_wheels.gain, new_lggo_params_g_wheels.gain, new_lggo_params_b_wheels.gain);
        // }
        // if (debug_mode == DEBUG_OFFSET) {
        //     return make_float3(new_lggo_params_r_wheels.offset, new_lggo_params_g_wheels.offset, new_lggo_params_b_wheels.offset);
        // }

        output_color.x = apply_lggo(output_color.x, convert_lggo_to_reals(new_lggo_params_r_wheels), false, mid_gray);
        output_color.y = apply_lggo(output_color.y, convert_lggo_to_reals(new_lggo_params_g_wheels), false, mid_gray);
        output_color.z = apply_lggo(output_color.z, convert_lggo_to_reals(new_lggo_params_b_wheels), false, mid_gray);
    }
    return output_color;
}
