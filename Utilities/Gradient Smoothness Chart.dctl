// clang-format off
DEFINE_UI_PARAMS(hue, Base Hue, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 360.0, 0.01)
DEFINE_UI_PARAMS(hue_angle, Angle Between Patches, DCTLUI_SLIDER_FLOAT, 180.0, 0.0, 360.0, 0.01)
DEFINE_UI_PARAMS(base_value, Base Value, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(saturation, Saturation, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.01)
DEFINE_UI_PARAMS(num_bands, Number of Exposures, DCTLUI_SLIDER_INT, 10, 1, 50, 1)
DEFINE_UI_PARAMS(num_slices, Number of Colors, DCTLUI_SLIDER_INT, 9, 1, 50, 1)
DEFINE_UI_PARAMS(mid_gray, Mid Gray, DCTLUI_VALUE_BOX, 0.18)
DEFINE_UI_PARAMS(clamp_output_min, Min Clamp, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(clamp_output_max, Max Clamp, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(clamp_output, Clamp Output, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(vertical, Vertical, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(band_interval, Band Interval, DCTLUI_COMBO_BOX, 1, {EQUAL, EXPONENTIAL}, {Equal (Log), Exponential (Linear)})
DEFINE_UI_PARAMS(continuous, Continuous Mode, DCTLUI_COMBO_BOX, 1, {DISCRETE, CONTINUOUS_MIXTURES, CONTINUOUS_EXP, CONTINUOUS_BOTH}, {Discrete, Continuous Colors, Continuous Exp, Fully Continuous})

// clang-format on

__DEVICE__ float3 hsv_to_rgb(float hue, float sat, float val) {
    // assume hue is in degrees
    hue = _fmod(hue, 360.0f);
    float c = val * sat;
    float x = c * (1.0f - _fabs(_fmod(hue / 60.0f, 2.0f) - 1.0f));
    float m = val - c;
    float3 rgbp;
    if (0.0f <= hue && hue < 60.0f) {
        rgbp = make_float3(c, x, 0.0f);
    } else if (60.0f <= hue && hue < 120.0f) {
        rgbp = make_float3(x, c, 0.0f);
    } else if (120.0f <= hue && hue < 180.0f) {
        rgbp = make_float3(0.0f, c, x);
    } else if (180.0f <= hue && hue < 240.0f) {
        rgbp = make_float3(0.0f, x, c);
    } else if (240.0f <= hue && hue < 300.0f) {
        rgbp = make_float3(x, 0.0f, c);
    } else { // if (300.0f < hue && hue < 360.0f) {
        rgbp = make_float3(c, 0.0f, x);
    }
    return rgbp + m;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float x = (float)p_X / (p_Width - 1);
    float y = (float)p_Y / (p_Height - 1);

    if (vertical) {
        float temp = x;
        x = y;
        y = temp;
    }

    float band_height = 1.0f / num_bands;
    float curr_band = y / band_height;
    if (continuous == CONTINUOUS_MIXTURES || continuous == DISCRETE) {
        curr_band = _ceilf(curr_band);
    }

    // Kinda hacky max_val intended to have a roughly mid-gray center in one of the linear gradients.
    const float max_val = 1.0f + saturation;
    float curr_band_value;
    if (band_interval == EQUAL) {
        curr_band_value = max_val * ((float)curr_band / num_bands);
    } else {
        curr_band_value = max_val * mid_gray * _exp2f(curr_band - _round(num_bands / 2.0f));
    }

    float mixture_amount = x;
    if (continuous == CONTINUOUS_EXP || continuous == DISCRETE) {
        mixture_amount = _floor(x * num_slices) / (num_slices - 1);
        if (num_slices == 1) {
            mixture_amount = 0.5f;
        }
    }

    // Draw Gradient
    float3 left_patch = hsv_to_rgb(hue, saturation, curr_band_value * base_value);
    float3 right_patch = hsv_to_rgb(hue + hue_angle, saturation, curr_band_value);
    float3 output = _mix(left_patch, right_patch, mixture_amount);

    // Output Clamping
    if (clamp_output) {
        if (output.x > clamp_output_max || output.y > clamp_output_max || output.z > clamp_output_max || output.x < clamp_output_min ||
            output.y < clamp_output_min || output.z < clamp_output_min) {
            output = make_float3(clamp_output_min, clamp_output_min, clamp_output_min);
        }
    }

    return output;
}