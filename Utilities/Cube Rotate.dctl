DEFINE_UI_PARAMS(color_r, Color R, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(color_g, Color G, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(color_b, Color B, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(inverse, Inverse, DCTLUI_CHECK_BOX, 0)

__DEVICE__ float3 cross_product(float3 a, float3 b) {
    float3 out = make_float3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
    return out;
}

__DEVICE__ inline float pow2f(float base) {
    return base * base;
}

__DEVICE__ float dot_product(float3 a, float3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

__DEVICE__ float3 unit_vec(float3 a) {
    float norm = _sqrtf(pow2f(a.x) + pow2f(a.y) + pow2f(a.z));
    float3 out = make_float3(a.x / norm, a.y / norm, a.z / norm);
    return out;
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ void make_rotation_mat_axis_angle(float mat[3][3], float3 axis, float angle) {
    // Axis assumed to be unit vector, angle assuemd to be in radians
    float c = _cosf(angle);
    float s = _sinf(angle);

    mat[0][0] = c + pow2f(axis.x) * (1.0f - c);
    mat[0][1] = axis.x * axis.y * (1.0f - c) - axis.z * s;
    mat[0][2] = axis.x * axis.z * (1.0f - c) + axis.y * s;
    mat[1][0] = axis.x * axis.y * (1.0f - c) + axis.z * s;
    mat[1][1] = c + pow2f(axis.y) * (1.0f - c);
    mat[1][2] = axis.y * axis.z * (1.0f - c) - axis.x * s;
    mat[2][0] = axis.z * axis.x * (1.0f - c) - axis.y * s;
    mat[2][1] = axis.z * axis.y * (1.0f - c) + axis.x * s;
    mat[2][2] = c + pow2f(axis.z) * (1.0f - c);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 output;
    float3 curr_color = make_float3(p_R, p_G, p_B);
    float mat[3][3] = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {0.0f, 0.0f, 1.0f}};

    float3 axis = unit_vec(make_float3(1.0f, 1.0f, 1.0f));
    float3 other_axis = unit_vec(make_float3(color_r, color_g, color_b));

    float angle = _acosf(dot_product(axis, other_axis));
    if (inverse) {
        angle *= -1;
    }
    float3 orth = unit_vec(cross_product(other_axis, axis));
    make_rotation_mat_axis_angle(mat, orth, angle);

    output = mv_33_3(mat, curr_color);
    return output;
}
