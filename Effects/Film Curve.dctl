DEFINE_UI_PARAMS(gamma_r, Red Gamma, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(gamma_g, Green Gamma, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(gamma_b, Blue Gamma, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(dmin_r, Red D_MIN, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(dmin_g, Green D_MIN, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(dmin_b, Blue D_MIN, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(dmax_r, Red D_MAX, DCTLUI_SLIDER_FLOAT, 4.0, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(dmax_g, Green D_MAX, DCTLUI_SLIDER_FLOAT, 4.0, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(dmax_b, Blue D_MAX, DCTLUI_SLIDER_FLOAT, 4.0, 0.0, 10.0, 0.0001)
DEFINE_UI_PARAMS(offset_r, Red Offset, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(offset_g, Green Offset, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(offset_b, Blue Offset, DCTLUI_VALUE_BOX, 0.0)

DEFINE_UI_PARAMS(mid_gray, Mid Gray, DCTLUI_VALUE_BOX, 0.18)
DEFINE_UI_PARAMS(exposure, Exposure Gain, DCTLUI_VALUE_BOX, 1.0)

DEFINE_UI_PARAMS(lin_to_exp, Linear to Exposure, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(exp_to_log_exp, Exposure to Log10 Exposure, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(log_exp_to_density, Characteristic Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(density_to_transmittance, Density to Transmittance, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(show_curve, Draw Characteristic Curve, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(curve_type, Curve Type, DCTLUI_COMBO_BOX, 0, {SIGMOID, QUAD_SIGMOID}, {Sigmoid, Quadratic Sigmoid})

typedef struct {
        float gamma;
        float dmin, dmax;
        float offset;
        int curve_type;
} characteristic_params_t;

__DEVICE__ float sigmoid(float x) {
    return 1.0f / (1.0f + _expf(-1.0f * x));
}

__DEVICE__ float smoothrelu(float x, float window) {
    if (x <= -1.0f * window) {
        return 0.0f;
    } else if (-1.0f * window <= x && x <= window) {
        float coeff = window / _powf(window * 2.0f, 2.0f);
        return coeff * (x + window) * (x + window);
    } else {
        return x;
    }
}

__DEVICE__ float quadratic_sigmoid(float x) {
    // Similar to sigmoid, but just a piecewise function with some hard borders.
    if (x < 0.0f) {
        return smoothrelu(x + 0.5f, 0.1f);
    } else {
        // x >= 0.0
        return 1.0f - smoothrelu(-1.0f * x + 0.5f, 0.1f);
    }
}

__DEVICE__ float characteristic_curve(float x, __PRIVATE__ characteristic_params_t* params) {
    float out, coeff;
    if (params->curve_type == SIGMOID) {
        coeff = params->gamma / (0.25f * (params->dmax - params->dmin));
        out = sigmoid(coeff * (x + params->offset)) * (params->dmax - params->dmin) + params->dmin;
    } else if (params->curve_type == QUAD_SIGMOID) {
        coeff = params->gamma / (params->dmax - params->dmin);
        out = quadratic_sigmoid(coeff * (x + params->offset)) * (params->dmax - params->dmin) + params->dmin;
    }
    return out;
}

__DEVICE__ float3 draw_grid_lines(float x, float y, float3 curr_color) {
    float major_line_x = _fabs(_fmod(_fabs(x) + 0.1f, 1.0f) - 0.1f);
    float zero_line_x = _fabs(x - 0.0f);
    float major_line_y = _fabs(_fmod(y, 1.0f));
    float3 output_color = curr_color;
    if (-4.0f < x && x < 4.0f && 0.0f < y && y < 6.0f && (major_line_x <= 0.02f || major_line_y <= 0.02f || zero_line_x <= 0.05f)) {
        output_color += 0.1f;
    }
    return output_color;
}

__DEVICE__ float3 draw_curve(float x, float y, float3 replacement_color, __PRIVATE__ characteristic_params_t* params) {
    float y_val = characteristic_curve(x, params);
    float diff = _fabs(y_val - y);
    float3 output_color = make_float3(0.0f, 0.0f, 0.0f);
    if (diff <= 0.01f) {
        output_color = replacement_color;
    }
    return output_color;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 curr_color = make_float3(p_R, p_G, p_B);

    characteristic_params_t red_curve = {gamma_r, dmin_r, dmax_r, offset_r, curve_type};
    characteristic_params_t green_curve = {gamma_g, dmin_g, dmax_g, offset_g, curve_type};
    characteristic_params_t blue_curve = {gamma_b, dmin_b, dmax_b, offset_b, curve_type};

    if (lin_to_exp) {
        curr_color *= exposure;
    }

    curr_color *= 1.0f / mid_gray; // scale middle gray to the midpoint of sigmoid.

    if (exp_to_log_exp) {
        curr_color = make_float3(_log10f(curr_color.x), _log10f(curr_color.y), _log10f(curr_color.z));
    }

    if (log_exp_to_density) {
        curr_color = make_float3(characteristic_curve(curr_color.x, &red_curve),
                                 characteristic_curve(curr_color.y, &green_curve),
                                 characteristic_curve(curr_color.z, &blue_curve));
    }

    if (density_to_transmittance) {
        curr_color = make_float3(_exp10f(-1.0f * curr_color.x), _exp10f(-1.0f * curr_color.y), _exp10f(-1.0f * curr_color.z));
    }

    if (show_curve) {
        float x = (float)p_X / p_Width;
        x = (x - 0.5f) * p_Width / p_Height + 0.5f;
        float y = 1.0f - (float)p_Y / p_Height;
        x = _mix(-4.0f, 4.0f, x);
        y = _mix(0.0f, 6.0f, y);
        curr_color = draw_grid_lines(x, y, curr_color);
        curr_color += draw_curve(x, y, make_float3(1.0f, 0.0f, 0.0f), &red_curve);
        curr_color += draw_curve(x, y, make_float3(0.0f, 1.0f, 0.0f), &green_curve);
        curr_color += draw_curve(x, y, make_float3(0.0f, 0.0f, 1.0f), &blue_curve);
    }

    return curr_color;
}