#line 2
// clang-format off
DEFINE_UI_PARAMS(exposure_lost, Reflection exposure lost, DCTLUI_SLIDER_FLOAT, -3.0, -10.0, 0.0, 0.1)
DEFINE_UI_PARAMS(green_exposure_lost, Green exposure lost, DCTLUI_SLIDER_FLOAT, -1.4, -10.0, 0.0, 0.1)
DEFINE_UI_PARAMS(blue_exposure_lost, Blue exposure lost, DCTLUI_SLIDER_FLOAT, -1.4, -10.0, 0.0, 0.1)
DEFINE_UI_PARAMS(blur_type, Blur Type, DCTLUI_COMBO_BOX, 0, {GAUSSIAN, EXPONENTIAL}, {Gaussian Blur, Exponential Blur})
DEFINE_UI_PARAMS(blur_amt, Blur Amount, DCTLUI_SLIDER_FLOAT, 3.0, 0.0, 30.0, 1.0)
DEFINE_UI_PARAMS(correct_red_shift, Red Shift Correction, DCTLUI_COMBO_BOX, 2, {OFF, GAIN, MATRIX}, {No Correction, RGB Gain, Matrix})
// clang-format on

#define PI (3.14159265358979)

__DEVICE__ float powf(float base, float exp) {
    float out = _copysignf(_powf(_fabs(base), exp), base);
    return out;
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ void mat_inverse_33(float inv_buf[3][3], float m[3][3]) {
    // from https://ardoris.wordpress.com/2008/07/18/general-formula-for-the-inverse-of-a-3x3-matrix/

    float det = m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]) - m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) +
                m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0]);

    inv_buf[0][0] = (m[1][1] * m[2][2] - m[1][2] * m[2][1]) / det;
    inv_buf[0][1] = (m[0][2] * m[2][1] - m[0][1] * m[2][2]) / det;
    inv_buf[0][2] = (m[0][1] * m[1][2] - m[0][2] * m[1][1]) / det;
    inv_buf[1][0] = (m[1][2] * m[2][0] - m[1][0] * m[2][2]) / det;
    inv_buf[1][1] = (m[0][0] * m[2][2] - m[0][2] * m[2][0]) / det;
    inv_buf[1][2] = (m[0][2] * m[1][0] - m[0][0] * m[1][2]) / det;
    inv_buf[2][0] = (m[1][0] * m[2][1] - m[1][1] * m[2][0]) / det;
    inv_buf[2][1] = (m[0][1] * m[2][0] - m[0][0] * m[2][1]) / det;
    inv_buf[2][2] = (m[0][0] * m[1][1] - m[0][1] * m[1][0]) / det;
}

__DEVICE__ int get_coord(float x, int width) {
    return (int)_round((x + 0.5f) * (width - 1));
}

__DEVICE__ float get_coord_float(float x, int width) {
    return ((x + 0.5f) * (float)(width - 1));
}

__DEVICE__ float3 get_color(int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float r = _tex2D(p_TexR, p_X, p_Y);
    float g = _tex2D(p_TexG, p_X, p_Y);
    float b = _tex2D(p_TexB, p_X, p_Y);

    return make_float3(r, g, b);
}

__DEVICE__ float3 sample_point_bilinear(float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float f_x = get_coord_float(x, p_Width);
    float f_y = get_coord_float(y, p_Height);

    int x_low = (int)_floor(f_x);
    int x_high = (int)_ceil(f_x);
    int y_low = (int)_floor(f_y);
    int y_high = (int)_ceil(f_y);

    float3 c_ll = get_color(x_low, y_low, p_TexR, p_TexG, p_TexB);
    float3 c_lh = get_color(x_low, y_high, p_TexR, p_TexG, p_TexB);
    float3 c_hl = get_color(x_high, y_low, p_TexR, p_TexG, p_TexB);
    float3 c_hh = get_color(x_high, y_high, p_TexR, p_TexG, p_TexB);

    float mix_x = f_x - x_low; // y_high - y_low guaranteed to be 1.
    float mix_y = f_y - y_low;

    float3 c_l = _mix(c_ll, c_hl, mix_x);
    float3 c_h = _mix(c_lh, c_hh, mix_x);
    float3 c = _mix(c_l, c_h, mix_y);
    return c;
}

__DEVICE__ float convert_gamma(float g) {
    // Converts -1 to +1 range to an exponent
    // Essentially what Resolve does with its gamma
    // correction.
    float out;
    if (g <= 0) {
        out = 1.0f + (-4.0f * g);
    } else {
        out = 1.0f / (4.0f * g + 1);
    }
    return out;
}

__DEVICE__ float3 gaussian_blur(float radius, float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float std = (float)radius / 2.0;
    int window_size = (int)_ceilf(2 * std * 3);

    int center_x = get_coord(x, p_Width);
    int center_y = get_coord(y, p_Height);

    if (window_size / 2 <= 0) {
        return get_color(center_x, center_y, p_TexR, p_TexG, p_TexB);
    }

    float3 curr_pixel = get_color(center_x, center_y, p_TexR, p_TexG, p_TexB);

    float3 sum = make_float3(0, 0, 0);
    float weight_sum = 0;
    for (int i = center_x - (window_size / 2); i <= center_x + (window_size / 2); ++i) {
        for (int j = center_y - (window_size / 2); j <= center_y + (window_size / 2); ++j) {
            float3 runner = get_color(i, j, p_TexR, p_TexG, p_TexB);
            float weight = 1.0 / (2.0 * PI * std * std) *
                           _expf((powf(_fabs((float)(center_x - i)), 2.0) + powf(_fabs((float)(center_y - j)), 2.0)) / (-2.0 * std * std));
            weight_sum += weight;
            sum += runner * weight;
        }
    }
    return sum / weight_sum;
}

__DEVICE__ inline float exp_k(float x, float y, float r0) {
    return _expf(-_hypotf(x, y) / r0);
}

__DEVICE__ float3 exp_blur(float radius, float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    // Adapted from https://github.com/hotgluebanjo/halation-dctl/blob/master/halation.dctl
    int center_x = get_coord(x, p_Width);
    int center_y = get_coord(y, p_Height);

    int window_size = (int)_ceilf(2 * radius * 4.5);
    if (window_size / 2 <= 0) {
        return get_color(center_x, center_y, p_TexR, p_TexG, p_TexB);
    }
    float3 sum = make_float3(0.0f, 0.0f, 0.0f);
    float weight_sum = 0.0f;
    for (int i = center_x - (window_size / 2); i <= center_x + (window_size / 2); ++i) {
        for (int j = center_y - (window_size / 2); j <= center_y + (window_size / 2); ++j) {
            float weight = exp_k(i - center_x, j - center_y, radius);
            float3 runner = get_color(i, j, p_TexR, p_TexG, p_TexB);
            sum += weight * runner;
            weight_sum += weight;
        }
    }

    return sum / weight_sum;
}

__DEVICE__ float3
halation(float3 scene_color, float3 diffused_color, float exposure_lost_lin, float green_exposure_lost_lin, float blue_exposure_lost_lin) {
    float3 output = scene_color;
    output.x += diffused_color.x * exposure_lost_lin;
    output.y += diffused_color.x * exposure_lost_lin * green_exposure_lost_lin;
    output.z += diffused_color.x * exposure_lost_lin * green_exposure_lost_lin * blue_exposure_lost_lin;
    return output;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {

    float X = (float)p_X / (float)(p_Width - 1) - 0.5f;
    float Y = (float)p_Y / (float)(p_Height - 1) - 0.5f;

    float exposure_lost_lin = _exp2f(exposure_lost);
    float green_exposure_lost_lin = _exp2f(green_exposure_lost);
    float blue_exposure_lost_lin = _exp2f(blue_exposure_lost);
    float blur_radius = (blur_amt / 1000.0f) * p_Width;

    float3 scale_color;
    if (blur_type == GAUSSIAN) {
        scale_color = gaussian_blur(blur_radius, X, Y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    } else if (blur_type == EXPONENTIAL) {
        scale_color = exp_blur(blur_radius / 3, X, Y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    }

    float3 curr_color = get_color(p_X, p_Y, p_TexR, p_TexG, p_TexB);
    float3 halation_color = halation(curr_color, scale_color, exposure_lost_lin, green_exposure_lost_lin, blue_exposure_lost_lin);

    float3 output_color;
    if (correct_red_shift == MATRIX) {
        float3 red = make_float3(1.0, 0.0, 0.0);
        float3 red_output = halation(red, red, exposure_lost_lin, green_exposure_lost_lin, blue_exposure_lost_lin);
        float3 green = make_float3(0.0, 1.0, 0.0);
        float3 green_output = halation(green, green, exposure_lost_lin, green_exposure_lost_lin, blue_exposure_lost_lin);
        float3 blue = make_float3(0.0, 0.0, 1.0);
        float3 blue_output = halation(blue, blue, exposure_lost_lin, green_exposure_lost_lin, blue_exposure_lost_lin);

        float inv_matrix_buf[3][3] = {};
        float forward_matrix[3][3] = {
            {red_output.x, green_output.x, blue_output.x},
            {red_output.y, green_output.y, blue_output.y},
            {red_output.z, green_output.z, blue_output.z},
        };
        mat_inverse_33(inv_matrix_buf, forward_matrix);
        output_color = mv_33_3(inv_matrix_buf, halation_color);
    } else if (correct_red_shift == GAIN) {
        float3 white = make_float3(1.0, 1.0, 1.0);
        float3 white_output = halation(white, white, exposure_lost_lin, green_exposure_lost_lin, blue_exposure_lost_lin);
        output_color = halation_color * white / white_output;
    } else if (correct_red_shift == OFF) {
        // do nothing
        output_color = halation_color;
    }

    return output_color;
}
