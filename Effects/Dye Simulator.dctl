#line 2

// clang-format off
DEFINE_UI_PARAMS(cyan_mean, Cyan Mean, DCTLUI_SLIDER_FLOAT, 676, 380, 800, 0.01)
DEFINE_UI_PARAMS(magenta_mean, Magenta Mean, DCTLUI_SLIDER_FLOAT, 533, 380, 800, 0.01)
DEFINE_UI_PARAMS(yellow_mean, Yellow Mean, DCTLUI_SLIDER_FLOAT, 419, 380, 800, 0.01)
DEFINE_UI_PARAMS(silver_mean, Silver Mean, DCTLUI_SLIDER_FLOAT, 500, 380, 800, 0.01)

DEFINE_UI_PARAMS(cyan_left_std, Cyan Left Std, DCTLUI_SLIDER_FLOAT, 75, 1, 200, 0.01)
DEFINE_UI_PARAMS(magenta_left_std, Magenta Left Std, DCTLUI_SLIDER_FLOAT, 53, 1, 200, 0.01)
DEFINE_UI_PARAMS(yellow_left_std, Yellow Left Std, DCTLUI_SLIDER_FLOAT, 150, 1, 200, 0.01)
DEFINE_UI_PARAMS(silver_left_std, Silver Left Std, DCTLUI_SLIDER_FLOAT, 300, 1, 300, 0.01)

DEFINE_UI_PARAMS(cyan_right_std, Cyan Right Std, DCTLUI_SLIDER_FLOAT, 55, 1, 200, 0.01)
DEFINE_UI_PARAMS(magenta_right_std, Magenta Right Std, DCTLUI_SLIDER_FLOAT, 37, 1, 200, 0.01)
DEFINE_UI_PARAMS(yellow_right_std, Yellow Right Std, DCTLUI_SLIDER_FLOAT, 52, 1, 200, 0.01)
DEFINE_UI_PARAMS(silver_right_std, Silver Right Std, DCTLUI_SLIDER_FLOAT, 300, 1, 300, 0.01)

DEFINE_UI_PARAMS(cyan_max_value, Cyan Max Value, DCTLUI_SLIDER_FLOAT, 1.96, 0, 2, 0.01)
DEFINE_UI_PARAMS(magenta_max_value, Magenta Max Value, DCTLUI_SLIDER_FLOAT, 1.0, 0, 2, 0.01)
DEFINE_UI_PARAMS(yellow_max_value, Yellow Max Value, DCTLUI_SLIDER_FLOAT, 1.44, 0, 2, 0.01)
DEFINE_UI_PARAMS(silver_max_value, Silver Max Value, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.01)

DEFINE_UI_PARAMS(cyan_min_value, Cyan Min Value, DCTLUI_SLIDER_FLOAT, 0.0133, 0, 1, 0.01)
DEFINE_UI_PARAMS(magenta_min_value, Magenta Min Value, DCTLUI_SLIDER_FLOAT, 0.0, 0, 1, 0.01)
DEFINE_UI_PARAMS(yellow_min_value, Yellow Min Value, DCTLUI_SLIDER_FLOAT, 0.0, 0, 1, 0.01)
DEFINE_UI_PARAMS(silver_min_value, Silver Min Value, DCTLUI_SLIDER_FLOAT, 0.0, 0, 1, 0.01)

DEFINE_UI_PARAMS(silver_ratio, Silver Ratio, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
// Input Gain
// Hint: Put mid gray at input of 1.0
DEFINE_UI_PARAMS(input_gain, Input Gain, DCTLUI_VALUE_BOX, 1.0)

// Charts
DEFINE_UI_PARAMS(density_charts, Draw Dye Density Chart, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(observer_charts, Draw Observer Chart, DCTLUI_CHECK_BOX, 0)

DEFINE_UI_PARAMS(input_metric, Input Metric, DCTLUI_COMBO_BOX, 0, {INPUT_CONCENTRATION}, {Concentration})
DEFINE_UI_PARAMS(observer, Observer, DCTLUI_COMBO_BOX, 3, {STATUS_M_DENSITY_OBSERVER, STATUS_M_TRANSMITTANCE_OBSERVER, STATUS_A_DENSITY_OBSERVER, STATUS_A_TRANSMITTANCE_OBSERVER, XYZ_D65_OBSERVER, XYZ_A_OBSERVER, XYZ_E_OBSERVER}, {Status M Density, Status M Transmittance, Status A Density, Status A Transmittance, XYZ Color D65 Projection, XYZ Color A Projection, XYZ Color E Projection})

// clang-format on

__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

__DEVICE__ float pow2(float x) {
    return x * x;
}

__DEVICE__ float mod(float x, float y) {
    if (x < 0) {
        return y + _fmod(x, y);
    } else {
        return _fmod(x, y);
    }
}

__DEVICE__ float maxf(float x, float y) {
    return _fmaxf(x, y);
}

typedef struct {
        float mean;
        float left_std;
        float right_std;
        float max_value;
        float min_value;
} gaussian_piecewise_params_t;

__DEVICE__ gaussian_piecewise_params_t make_gaussian_piecewise_params(float mean, float left_std, float right_std, float max_value, float min_value) {
    gaussian_piecewise_params_t out;
    out.mean = mean;
    out.left_std = left_std;
    out.right_std = right_std;
    out.max_value = max_value;
    out.min_value = min_value;
    return out;
}

__DEVICE__ float gaussian_piecewise(float x, gaussian_piecewise_params_t params) {
    float out;
    if (x < params.mean) {
        // Control it only with left std
        out = _expf(-1 * pow2(1.0 / params.left_std) * pow2(x - params.mean) / 2.0);
    } else {
        out = _expf(-1 * pow2(1.0 / params.right_std) * pow2(x - params.mean) / 2.0);
    }
    out = out * (params.max_value - params.min_value) + params.min_value;
    return out;
}

__DEVICE__ gaussian_piecewise_params_t scale_gaussian_piecewise_params(gaussian_piecewise_params_t params, float scale) {
    gaussian_piecewise_params_t out;
    out.mean = params.mean;
    out.left_std = params.left_std;
    out.right_std = params.right_std;
    out.max_value = params.max_value * scale;
    out.min_value = params.min_value * scale;
    return out;
}

__DEVICE__ float get_density(float wavelength, gaussian_piecewise_params_t params[4]) {
    float out = 0.0;
    for (int i = 0; i < 4; i++) {
        out += gaussian_piecewise(wavelength, params[i]);
    }
    return out;
}

// inclusive
#define MIN_WAVELENGTH (360)
// inclusive
#define MAX_WAVELENGTH (780)
// Wavelength step size
#define WAVELENGTH_STEP (10)

__CONSTANT__ float xyz_cmfs[43][3] = {
    {0.0001299, 0.000003917, 0.0006061}, //
    {0.0004149, 0.00001239, 0.001946},   //
    {0.001368, 0.000039, 0.006450001},   //
    {0.004243, 0.00012, 0.02005001},     //
    {0.01431, 0.000396, 0.06785001},     //
    {0.04351, 0.00121, 0.2074},          //
    {0.13438, 0.004, 0.6456},            //
    {0.2839, 0.0116, 1.3856},            //
    {0.34828, 0.023, 1.74706},           //
    {0.3362, 0.038, 1.77211},            //
    {0.2908, 0.06, 1.6692},              //
    {0.19536, 0.09098, 1.28764},         //
    {0.09564, 0.13902, 0.8129501},       //
    {0.03201, 0.20802, 0.46518},         //
    {0.0049, 0.323, 0.272},              //
    {0.0093, 0.503, 0.1582},             //
    {0.06327, 0.71, 0.07824999},         //
    {0.1655, 0.862, 0.04216},            //
    {0.2904, 0.954, 0.0203},             //
    {0.4334499, 0.9949501, 0.008749999}, //
    {0.5945, 0.995, 0.0039},             //
    {0.7621, 0.952, 0.0021},             //
    {0.9163, 0.87, 0.001650001},         //
    {1.0263, 0.757, 0.0011},             //
    {1.0622, 0.631, 0.0008},             //
    {1.0026, 0.503, 0.00034},            //
    {0.8544499, 0.381, 0.00019},         //
    {0.6424, 0.265, 0.00004999999},      //
    {0.4479, 0.175, 0.00002},            //
    {0.2835, 0.107, 0},                  //
    {0.1649, 0.061, 0},                  //
    {0.0874, 0.032, 0},                  //
    {0.04677, 0.017, 0},                 //
    {0.0227, 0.00821, 0},                //
    {0.01135916, 0.004102, 0},           //
    {0.005790346, 0.002091, 0},          //
    {0.002899327, 0.001047, 0},          //
    {0.001439971, 0.00052, 0},           //
    {0.0006900786, 0.0002492, 0},        //
    {0.0003323011, 0.00012, 0},          //
    {0.0001661505, 0.00006, 0},          //
    {0.00008307527, 0.00003, 0},         //
    {0.00004150994, 0.00001499, 0},      //
};

// 360 to 780 nm in 10 nm steps, log10 spectral product
__CONSTANT__ float status_a_sensitivities[43][3] = {
    {-62.232, -29.150, -19.198}, //
    {-59.532, -26.950, -15.398}, //
    {-56.832, -24.750, -11.598}, //
    {-54.132, -22.550, -7.798},  //
    {-51.432, -20.350, -3.998},  //
    {-48.732, -18.150, -0.198},  //
    {-46.032, -15.950, 3.602},   //
    {-43.332, -13.750, 4.819},   //
    {-40.632, -11.550, 5.000},   //
    {-37.932, -9.350, 4.912},    //
    {-35.232, -7.150, 4.620},    //
    {-32.532, -4.950, 4.040},    //
    {-29.832, -2.750, 2.989},    //
    {-27.132, -0.550, 1.566},    //
    {-24.432, 1.650, 0.165},     //
    {-21.732, 3.822, -1.235},    //
    {-19.032, 4.782, -2.635},    //
    {-16.332, 5.000, -4.035},    //
    {-13.632, 4.906, -5.435},    //
    {-10.932, 4.644, -6.835},    //
    {-8.232, 4.221, -8.235},     //
    {-5.532, 3.609, -9.635},     //
    {-2.832, 2.766, -11.035},    //
    {-0.132, 1.579, -12.435},    //
    {2.568, -0.121, -13.835},    //
    {4.638, -1.821, -15.235},    //
    {5.000, -3.521, -16.635},    //
    {4.871, -5.221, -18.035},    //
    {4.604, -6.921, -19.435},    //
    {4.286, -8.621, -20.835},    //
    {3.900, -10.321, -22.235},   //
    {3.551, -12.021, -23.635},   //
    {3.165, -13.721, -25.035},   //
    {2.776, -15.421, -26.435},   //
    {2.383, -17.121, -27.835},   //
    {1.970, -18.821, -29.235},   //
    {1.551, -20.521, -30.635},   //
    {1.141, -22.221, -32.035},   //
    {0.741, -23.921, -33.435},   //
    {0.341, -25.621, -34.835},   //
    {-0.059, -27.321, -36.235},  //
    {-0.459, -29.021, -37.635},  //
    {-0.859, -30.721, -39.035},  //
};

// 360 to 780 nm in 10 nm steps, log10 spectral product
__CONSTANT__ float status_m_sensitivities[43][3] = {
    {-65.491, -10.508, -10.397}, //
    {-62.891, -9.448, -7.897},   //
    {-60.291, -8.388, -5.397},   //
    {-57.691, -7.328, -2.897},   //
    {-55.091, -6.268, -0.397},   //
    {-52.491, -5.208, 2.103},    //
    {-49.891, -4.148, 4.111},    //
    {-47.291, -3.088, 4.632},    //
    {-44.691, -2.028, 4.871},    //
    {-42.091, -0.968, 5.000},    //
    {-39.491, 0.092, 4.955},     //
    {-36.891, 1.152, 4.743},     //
    {-34.291, 2.207, 4.343},     //
    {-31.691, 3.156, 3.743},     //
    {-29.091, 3.804, 2.990},     //
    {-26.491, 4.272, 1.852},     //
    {-23.891, 4.626, -0.348},    //
    {-21.291, 4.872, -2.548},    //
    {-18.691, 5.000, -4.748},    //
    {-16.091, 4.995, -6.948},    //
    {-13.491, 4.818, -9.148},    //
    {-10.891, 4.458, -11.348},   //
    {-8.291, 3.915, -13.548},    //
    {-5.691, 3.172, -15.748},    //
    {-3.091, 2.239, -17.948},    //
    {-0.491, 1.070, -20.148},    //
    {2.109, -0.130, -22.348},    //
    {4.479, -1.330, -24.548},    //
    {5.000, -2.530, -26.748},    //
    {4.899, -3.730, -28.948},    //
    {4.578, -4.930, -31.148},    //
    {4.252, -6.130, -33.348},    //
    {3.875, -7.330, -35.548},    //
    {3.491, -8.530, -37.748},    //
    {3.099, -9.730, -39.948},    //
    {2.687, -10.930, -42.148},   //
    {2.269, -12.130, -44.348},   //
    {1.859, -13.330, -46.548},   //
    {1.449, -14.530, -48.748},   //
    {1.054, -15.730, -50.948},   //
    {0.654, -16.930, -53.148},   //
    {0.265, -18.130, -55.348},   //
    {-0.135, -19.330, -57.548},  //
};

// Normalized at 100 at 560 nm
__CONSTANT__ float d65_illuminant[43] = {
    46.63868,   //
    52.089531,  //
    49.975798,  //
    54.648416,  //
    82.755073,  //
    91.486209,  //
    93.43199,   //
    86.682439,  //
    104.864986, //
    117.007671, //
    117.812258, //
    114.860942, //
    115.922925, //
    108.810733, //
    109.354525, //
    107.801717, //
    104.789799, //
    107.689494, //
    104.405502, //
    104.046198, //
    100,        //
    96.334199,  //
    95.788001,  //
    88.685659,  //
    90.006288,  //
    89.599214,  //
    87.698829,  //
    83.288739,  //
    83.699391,  //
    80.027013,  //
    80.214854,  //
    82.278088,  //
    78.284505,  //
    69.721543,  //
    71.609384,  //
    74.349246,  //
    61.604203,  //
    69.88582,   //
    75.087231,  //
    63.592894,  //
    46.418351,  //
    66.805615,  //
    63.382997,  //
};

// Normalized at 100 at 560 nm
__CONSTANT__ float a_illuminant[43] = {
    6.144620,   //
    7.821350,   //
    9.795100,   //
    12.085300,  //
    14.708000,  //
    17.675300,  //
    20.995000,  //
    24.670900,  //
    28.702700,  //
    33.085900,  //
    37.812100,  //
    42.869300,  //
    48.242300,  //
    53.913200,  //
    59.861100,  //
    66.063500,  //
    72.495900,  //
    79.132600,  //
    85.947000,  //
    92.912000,  //
    100.000000, //
    107.184000, //
    114.436000, //
    121.731000, //
    129.043000, //
    136.346000, //
    143.618000, //
    150.836000, //
    157.979000, //
    165.028000, //
    171.963000, //
    178.769000, //
    185.429000, //
    191.931000, //
    198.261000, //
    204.409000, //
    210.365000, //
    216.120000, //
    221.667000, //
    227.000000, //
    232.115000, //
    237.008000, //
    241.675000, //

};

__DEVICE__ float3 get_observer_weight_stepped(int wavelength, int observer_type) {
    if (wavelength < MIN_WAVELENGTH || wavelength > MAX_WAVELENGTH) {
        return make_float3(0.0, 0.0, 0.0);
    }
    int index = _floorf((wavelength - MIN_WAVELENGTH) / WAVELENGTH_STEP);
    float3 weights = make_float3(0.0, 0.0, 0.0);
    if (observer_type == STATUS_M_DENSITY_OBSERVER || observer_type == STATUS_M_TRANSMITTANCE_OBSERVER) {
        weights.x = _exp10f(status_m_sensitivities[index][0]);
        weights.y = _exp10f(status_m_sensitivities[index][1]);
        weights.z = _exp10f(status_m_sensitivities[index][2]);
    } else if (observer_type == STATUS_A_DENSITY_OBSERVER || observer_type == STATUS_A_TRANSMITTANCE_OBSERVER) {
        weights.x = _exp10f(status_a_sensitivities[index][0]);
        weights.y = _exp10f(status_a_sensitivities[index][1]);
        weights.z = _exp10f(status_a_sensitivities[index][2]);
    } else if (observer_type == XYZ_D65_OBSERVER || observer_type == XYZ_A_OBSERVER || observer_type == XYZ_E_OBSERVER) {
        weights.x = xyz_cmfs[index][0];
        weights.y = xyz_cmfs[index][1];
        weights.z = xyz_cmfs[index][2];
    }
    return weights;
}

__DEVICE__ float3 get_observer_weight(float wavelength, int observer_type) {
    if (wavelength < MIN_WAVELENGTH || wavelength > MAX_WAVELENGTH) {
        return make_float3(0.0, 0.0, 0.0);
    }
    float3 weights;
    if (_fabs((wavelength - MIN_WAVELENGTH) / WAVELENGTH_STEP - _round((wavelength - MIN_WAVELENGTH) / WAVELENGTH_STEP)) < 0.0001) {
        int index = _round(wavelength);
        weights = get_observer_weight_stepped(index, observer_type);
    } else {
        int index_low = _floorf((wavelength - MIN_WAVELENGTH) / WAVELENGTH_STEP) * WAVELENGTH_STEP + MIN_WAVELENGTH;
        int index_high = _ceilf((wavelength - MIN_WAVELENGTH) / WAVELENGTH_STEP) * WAVELENGTH_STEP + MIN_WAVELENGTH;
        float3 weights_low = get_observer_weight_stepped(index_low, observer_type);
        float3 weights_high = get_observer_weight_stepped(index_high, observer_type);
        weights = _mix(weights_low, weights_high, mod(wavelength, WAVELENGTH_STEP) / WAVELENGTH_STEP);
    }
    return weights;
}

__DEVICE__ float3 get_observer_value(gaussian_piecewise_params_t dyes[3], int observer_type, __PRIVATE__ float3* areas_ret) {

    float3 observed_color = make_float3(0.0, 0.0, 0.0);
    float3 areas = make_float3(0.0, 0.0, 0.0);
    float3 curr_weights = make_float3(0.0, 0.0, 0.0);
    float curr_density;
    float curr_transmittance;
    float curr_emission;

    for (int i = MIN_WAVELENGTH; i <= MAX_WAVELENGTH; i += WAVELENGTH_STEP) {
        curr_weights = get_observer_weight(i, observer_type);
        areas += curr_weights;

        curr_density = get_density(i, dyes);
        curr_transmittance = _exp10f(-1 * curr_density);

        int index = _floorf((i - MIN_WAVELENGTH) / WAVELENGTH_STEP);
        float light = 1.0;
        if (observer_type == XYZ_D65_OBSERVER) {
            light = d65_illuminant[index] / 100.0;
        } else if (observer_type == XYZ_A_OBSERVER) {
            light = a_illuminant[index] / 100.0;
        } else if (observer_type == XYZ_E_OBSERVER) {
            light = 1.0;
        }

        curr_emission = light * curr_transmittance;

        observed_color += make_float3(curr_weights.x * curr_emission, curr_weights.y * curr_emission, curr_weights.z * curr_emission);
    }

    // Integrate.
    observed_color /= areas;
    *areas_ret = areas;

    // Status M and Status A density are obviously in density units.
    if (observer_type == STATUS_M_DENSITY_OBSERVER || observer_type == STATUS_A_DENSITY_OBSERVER) {
        observed_color = make_float3(-1 * _log10f(observed_color.x), -1 * _log10f(observed_color.y), -1 * _log10f(observed_color.z));
    }
    return observed_color;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 input = make_float3(p_R, p_G, p_B);
    input = make_float3(maxf(input.x, 0.0), maxf(input.y, 0.0), maxf(input.z, 0.0));

    float3 gel_concentration = input * input_gain;
    // TODO: Implement other input metrics
    if (input_metric == INPUT_CONCENTRATION) {
        gel_concentration = input * input_gain;
    }

    gaussian_piecewise_params_t cyan_density = make_gaussian_piecewise_params(cyan_mean, cyan_left_std, cyan_right_std, cyan_max_value, cyan_min_value);
    gaussian_piecewise_params_t magenta_density =
        make_gaussian_piecewise_params(magenta_mean, magenta_left_std, magenta_right_std, magenta_max_value, magenta_min_value);
    gaussian_piecewise_params_t yellow_density =
        make_gaussian_piecewise_params(yellow_mean, yellow_left_std, yellow_right_std, yellow_max_value, yellow_min_value);
    gaussian_piecewise_params_t silver_density =
        make_gaussian_piecewise_params(silver_mean, silver_left_std, silver_right_std, silver_max_value, silver_min_value);

    gaussian_piecewise_params_t dyes[4] = {
        cyan_density,
        magenta_density,
        yellow_density,
        silver_density,
    };

    gaussian_piecewise_params_t scaled_dyes[4] = {
        scale_gaussian_piecewise_params(dyes[0], gel_concentration.x),
        scale_gaussian_piecewise_params(dyes[1], gel_concentration.y),
        scale_gaussian_piecewise_params(dyes[2], gel_concentration.z),
        scale_gaussian_piecewise_params(dyes[3], (gel_concentration.x + gel_concentration.y + gel_concentration.z) * silver_ratio),
    };

    float3 areas = make_float3(0.0, 0.0, 0.0);
    float3 observed_color = get_observer_value(scaled_dyes, observer, &areas);
    float3 output_color = observed_color;
    float x = (float)(p_X) / (p_Width - 1);
    float y = 1.0 - (float)(p_Y) / (p_Height - 1);

    const float chart_max_density = 2.0;
    if (density_charts || observer_charts) {
        // Draw vertical wavelength lines
        float threshold = 0.5;
        float curr_wavelength = MIN_WAVELENGTH + (MAX_WAVELENGTH - MIN_WAVELENGTH) * x;
        if (_fabs(mod(curr_wavelength + 50.0, 100.0) - 50.0) < threshold || _fabs(mod(curr_wavelength, 100.0) - 50.0) < threshold) {
            if (mod(y, 0.1) < 0.05) {
                output_color = make_float3(0.5, 0.5, 0.5);
            }
        }
    }

    if (density_charts) {
        // draw horizontal density lines
        if (_fabs(mod(y * chart_max_density + 0.5, 1.0) - 0.5) < 0.005 && mod(x, 0.1) < 0.05) {
            output_color = make_float3(0.25, 0.25, 0.25);
        }

        // Draw density curves
        float curr_wavelength = MIN_WAVELENGTH + (MAX_WAVELENGTH - MIN_WAVELENGTH) * x;

        gaussian_piecewise_params_t scaled_dyes_for_charts[4] = {
            scale_gaussian_piecewise_params(dyes[0], input_gain),
            scale_gaussian_piecewise_params(dyes[1], input_gain),
            scale_gaussian_piecewise_params(dyes[2], input_gain),
            scale_gaussian_piecewise_params(dyes[3], (input_gain + input_gain + input_gain) * silver_ratio),
        };

        float cyan_density_f = gaussian_piecewise(curr_wavelength, scaled_dyes_for_charts[0]);
        float magenta_density_f = gaussian_piecewise(curr_wavelength, scaled_dyes_for_charts[1]);
        float yellow_density_f = gaussian_piecewise(curr_wavelength, scaled_dyes_for_charts[2]);
        float silver_density_f = gaussian_piecewise(curr_wavelength, scaled_dyes_for_charts[3]);
        float total_density_f = get_density(curr_wavelength, scaled_dyes_for_charts);

        float chart_densities[5] = {cyan_density_f, magenta_density_f, yellow_density_f, silver_density_f, total_density_f};
        float3 chart_colors[5] = {
            make_float3(0.0, 1.0, 1.0),
            make_float3(1.0, 0.0, 1.0),
            make_float3(1.0, 1.0, 0.0),
            make_float3(0.18, 0.18, 0.18),
            make_float3(1.0, 1.0, 1.0),
        };
        for (int i = 0; i < 5; ++i) {
            if (_fabs(chart_densities[i] - y * chart_max_density) < 0.02) {
                output_color = chart_colors[i];
            }
        }
    }

    if (observer_charts) {
        // Draw sensitivity curves
        const float chart_max_sensitivity = 1.0;
        float curr_wavelength = MIN_WAVELENGTH + (MAX_WAVELENGTH - MIN_WAVELENGTH) * x;

        float3 curr_weights = get_observer_weight(curr_wavelength, observer) / areas;
        float chart_weights[3] = {curr_weights.x, curr_weights.y, curr_weights.z};
        float3 chart_colors[3] = {
            make_float3(1.0, 0.0, 0.0),
            make_float3(0.0, 1.0, 0.0),
            make_float3(0.0, 0.0, 1.0),
        };
        for (int i = 0; i < 3; ++i) {
            if (_fabs(chart_weights[i] - y * chart_max_sensitivity) < 0.02) {
                output_color = chart_colors[i];
            }
        }
    }

    return output_color;
}
